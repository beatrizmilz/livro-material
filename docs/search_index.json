[["8-graficos.html", "Capítulo 8 Visualização", " Capítulo 8 Visualização Agora que já temos em mãos as ferramentas para importar, arrumar, transformar e sumarizar os nossos dados, podemos dar um passo adiante no ciclo da Ciência de Dados: a construção de visualizações. Visualizar os dados é uma etapa importantíssima da análise estatística, pois é a partir dela que criamos boa parte da intuição necessária para escolher o teste ou modelo mais adequado para o nosso problema. Muitas vezes, um problema de análise de dados pode ser resolvido apenas com visualizações. Além disso, elas são o principal combustível da etapa de Comunicação da análise. Visualizações podem ser uma simples medida resumo (frequência, média, variância, mínimo, máximo etc), um conjunto dessas medidas organizadas em uma tabela ou a representação (de uma parte) dos dados em um gráfico. Neste capítulo, mostraremos como construir gráficos e tabelas bem formatadas dentro do R. Começaremos com a construção de gráficos e, em seguida, falaremos sobre a formatação de tabelas1. Mas, antes de mais nada, o que é um gráfico estatístico? Em geral, boa parte do trabalho necessário para a construção de uma tabela descritiva pode ser feito com as funções dos pacotes {dplyr} e {tidyr}, vistas no capítulo anterior.↩︎ "],["8-1-o-pacote-ggplot2.html", "8.1 O pacote ggplot2", " 8.1 O pacote ggplot2 A construção de gráficos no R foi revolucionada com a criação do pacote ggplot2, fruto da tese de doutorado do Hadley Wickham. Essa revolução teve base na filosofia que Hadley adotou para responder a pergunta “O que é um gráfico estatístico?”. Em 2005, o estatístico norte-americano Leland Wilkinson publicou o livro The Grammar of graphics (A gramática dos gráficos, em português), uma fonte de princípios fundamentais para a construção de gráficos estatísticos. No livro, ele defende que um gráfico é o mapeamento dos dados em atributos estéticos (posição, cor, forma, tamanho) de formas geométricas (pontos, linhas, barras, caixas). A partir dessa definição, Hadley escreveu A Layered Grammar of Graphics (Uma gramática em camada dos gráficos), acrescentando que os elementos de um gráfico (dados, sistema de coordenadas, rótulos, anotações, entre outros) são as suas camadas e que a construção de um gráfico se dá pela sobreposição dessas camadas. Essa é a essência do ggplot2: construir um gráfico camada por camada. Além de uma filosofia bem fundamentada, o ggplot2 ainda traz outras vantagens em relação aos gráficos do R base: gráficos naturalmente mais bonitos; fácil personalização (mais simples deixar o gráfico do jeito que você quer); a estrutura padronizada das funções deixa o aprendizado muito mais intuitivo; a diferença no código entre tipos diferentes de gráficos é muito pequena. Para discutir os principais aspectos da construção de gráficos com o ggplot2, vamos continuar utilizando a base de filmes do IMDB. Você pode baixá-la clicando aqui. Na próxima seção, vamos conhecer as principais funções do ggplot2 e começar a construir nossos primeiros gráficos. Não se esqueça de instalar e carregar o pacote antes de rodar os exemplos. install.packages(&quot;ggplot2&quot;) library(ggplot2) 8.1.1 Gráficos de pontos (dispersão) No ggplot2, os gráficos são construídos camada por camada, sendo a primeira delas dada pela função ggplot() (repare que não tem o “2”). Essa função recebe um data frame e cria a camada base do gráfico, o nosso canvas, onde acrescentaremos todos os outros elementos (camadas). Se rodarmos apenas a função ggplot(), obteremos um painel em branco. imdb &lt;- readr::read_rds(&quot;assets/data/imdb.rds&quot;) ggplot(data = imdb) Apesar de termos passado os dados para a função, precisamos especificar como as observações serão mapeadas nos aspectos visuais do gráfico e quais formas geométricas serão utilizadas para isso. O código abaixo constrói um gráfico de dispersão entre as variáveis orçamento e receita. ggplot(imdb) + geom_point(mapping = aes(x = orcamento, y = receita)) ## Warning: Removed 733 rows containing missing values (geom_point). Observe que: a primeira camada é dada pela função ggplot() e recebe a nossa base imdb; a segunda camada é dada pela função geom_point(), especificando a forma geométrica utilizada no mapeamento das observações (pontos); as camadas são unidas com um +; o mapeamento na função geom_point() recebe a função aes(), responsável por descrever como as variáveis serão mapeadas nos aspectos visuais dos pontos (a forma geométrica escolhida); neste caso, os aspectos visuais mapeados são a posição do ponto no eixo x e a posição do ponto no eixo y; o Warning nos avisa sobre a exclusão das observações que possuem NA na variável receita e/ou orçamento; todas essas funções são do pacote {ggplot2}. A combinação da função ggplot() e de uma ou mais funções geom_() definirá o tipo de gráfico gerado. O primeiro argumento de qualquer função geom é o mapping. Esse argumento serve para mapear os dados nos atributos estéticos da forma geométrica escolhida. Ele sempre receberá a função aes(), cujos argumentos vão sempre depender da forma geométrica que estamos utilizando. No caso de um gráfico de dispersão, precisamos definir a posição dos pontos nos eixos x e y. No exemplo, a posição do ponto no eixo x foi dada pela coluna orcamento e a posição do ponto no eixo y pela coluna receita. Atenção! As camadas dos gráficos são empilhadas utilizando-se o sinal +. Como a estrutura é muito parecida com a do pipe, é comum trocarmos o + por um %&gt;% no meio do código, resultando em erro. Podemos acrescentar uma terceira camada ao gráfico, gerando a reta y = x para visualizarmos os filmes não se pagaram. ggplot(imdb) + geom_point(mapping = aes(x = orcamento, y = receita)) + geom_abline(intercept = 0, slope = 1, color = &quot;red&quot;) ## Warning: Removed 733 rows containing missing values (geom_point). Assim, os pontos abaixo da reta representam os filmes com orçamento maior que a receita, isto é, aqueles que deram prejuízo. Em vez de utilizarmos a reta y = x, podemos pintar os pontos que deram lucro e prejuízo de cores diferentes. library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union imdb %&gt;% mutate( lucro = receita - orcamento, lucro = ifelse(lucro &lt;= 0, &quot;Não&quot;, &quot;Sim&quot;) ) %&gt;% filter(!is.na(lucro)) %&gt;% ggplot() + geom_point(mapping = aes(x = orcamento, y = receita, color = lucro)) Aqui temos dois pontos importantes: Unimos uma primeira parte de manipulação, utilizando as funções filter() e mutate(), com o código do gráfico. Essa etapa inicial de transformação da base é muito comum na construção de gráficos. A cor dos pontos foi alterada por meio do atributo color=, dentro da função aes(). Também podemos adicionar uma camada especificando os textos que representam cada atributo. Para isso, usamos a função labs(). imdb %&gt;% mutate( lucro = receita - orcamento, lucro = ifelse(lucro &lt;= 0, &quot;Não&quot;, &quot;Sim&quot;) ) %&gt;% filter(!is.na(lucro)) %&gt;% ggplot() + geom_point(mapping = aes(x = orcamento, y = receita, color = lucro)) + labs(x = &quot;Orçamento&quot;, y = &quot;Arrecadação&quot;, color = &quot;Houve lucro?&quot;) No ggplot, nós modificamos um gráfico alterando e acrescentando camadas. Agora que você já sabe como essa estrutura funciona, vamos estudar com mais atenção para que serve a função aes(). 8.1.2 Atributos estéticos O papel da função aes() (de aesthetics, estética em inglês) é indicar a relação entre os dados e cada aspecto visual do gráfico, como qual variável será representada no eixo x, qual será representada no eixo y, a cor e o tamanho dos componentes geométricos etc. Os aspectos que podem ou devem ser mapeados depende do tipo de gráfico que você está construindo. Segue abaixo uma lista dos aspectos visuais mais utilizados: color=: altera a cor de formas que não têm área (pontos e retas). fill=: altera a cor de formas com área (barras, caixas, densidades, áreas). size=: altera o tamanho de formas. type=: altera o tipo da forma, geralmente usada para pontos. linetype=: altera o tipo da linha. Um erro comum na hora de definir atributos estéticos de um gráfico é utilizar a função aes() de forma errada. Repare o que acontece quando tentamos definir diretamente a cor dos pontos dentro dessa função. ggplot(imdb) + geom_point(aes(x = orcamento, y = receita, color = &quot;blue&quot;)) ## Warning: Removed 733 rows containing missing values (geom_point). Estranho, não? O que aconteceu foi o seguinte: a função aes() espera uma variável para ser mapeada a cada atributo, então o valor blue é tratado como uma nova variável/coluna que tem essa string para todas as observações. Assim, todos pontos têm a mesma cor (vermelha, padrão do ggplot) pois pertencem todos à essa “categoria ‘blue’”. No caso, o que gostaríamos é de ter pintado todos os pontos de azul. A forma certa de fazer isso é colocando o atributo color= fora da função aes(): ggplot(imdb) + geom_point(aes(x = orcamento, y = receita), color = &quot;blue&quot;) ## Warning: Removed 733 rows containing missing values (geom_point). Vamos agora explorar novos gráficos a partir da família de funções geom_(). 8.1.3 Formas geométricas Os geoms definem qual forma geométrica será utilizada para a visualização das observações. Como já vimos, a função geom_point() gera gráficos de dispersão transformando pares \\((x,y)\\) em pontos. Veja a seguir outros geoms bastante utilizados: geom_line - para linhas definidas por pares (x,y). geom_abline - para retas definidas por um intercepto e uma inclinação. geom_hline - para retas horizontais. geom_bar - para barras. geom_histogram - para histogramas. geom_boxplot - para boxplots. geom_density - para densidades. geom_area - para áreas. Veja a seguir como é fácil gerar diversos gráficos diferentes utilizando a mesma estrutura do gráfico de dispersão acima: 8.1.3.1 Linhas imdb %&gt;% filter(diretor == &quot;Steven Spielberg&quot;) %&gt;% group_by(ano) %&gt;% summarise(nota_media = mean(nota_imdb, na.rm = TRUE)) %&gt;% ggplot() + geom_line(aes(x = ano, y = nota_media)) ## `summarise()` ungrouping output (override with `.groups` argument) 8.1.3.2 Histograma ggplot(imdb) + geom_histogram(aes(x = orcamento), color = &quot;black&quot;, fill = &quot;white&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 298 rows containing non-finite values (stat_bin). Enquanto o gráfico e dispersão demandam o mapeamento das posições x e y, o histograma requer apenas a posição x, já que, pela definição do gráfico, o eixo mostra a frequência de cada classe. 8.1.3.3 Boxplot imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita)) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). Repare que o boxplot pede uma variável categórica no eixo x. 8.1.3.4 Gráfico de barras Há duas formas de fazer um gráfico de barras. A primeira é utilizando a função geom_bar(), quando queremos que a função conte a frequência de cada categoria. imdb %&gt;% filter(ano &gt; 1990) %&gt;% ggplot() + geom_bar(aes(x = ano), color = &quot;black&quot;, fill = &quot;light blue&quot;) Ou a função geom_col(), quando já temos essas contagens. imdb %&gt;% count(diretor) %&gt;% filter(!is.na(diretor)) %&gt;% dplyr::top_n(5, n) %&gt;% ggplot() + geom_bar( aes(x = diretor, y = n), stat = &quot;identity&quot;, color = &quot;red&quot;, fill = &quot;pink&quot; ) 8.1.4 Juntando gráficos No ggplot, temos várias formas de juntar gráficos. Vamos apresentar a seguir as principais. 8.1.4.1 Vários geoms no mesmo gráfico Podemos acrescentar vários geoms em um mesmo gráfico, apenas adicionando novas camadas. No código abaixo, construímos o gráfico de dispersão da receita pelo orçamento dos filmes, acrescentando também uma reta de tendência aos pontos. ggplot(imdb) + geom_point(aes(x = orcamento, y = receita)) + geom_smooth(aes(x = orcamento, y = receita), se = FALSE, method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 733 rows containing non-finite values (stat_smooth). ## Warning: Removed 733 rows containing missing values (geom_point). Quando estamos usando mais de um geom, podemos economizar código especificando o aes() diretamente na função ggplot(). O mapeamento então é distribuído para todos os geoms do gráfico. ggplot(imdb, aes(x = orcamento, y = receita)) + geom_point() + geom_smooth(se = FALSE, method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 733 rows containing non-finite values (stat_smooth). ## Warning: Removed 733 rows containing missing values (geom_point). Mas você ainda pode usar o aes() dentro dos geoms para especificar mapeamentos específicos. ggplot(imdb, aes(x = orcamento, y = receita)) + geom_point(aes(color = ano)) + geom_smooth(color = &quot;black&quot;, se = FALSE, method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 733 rows containing non-finite values (stat_smooth). ## Warning: Removed 733 rows containing missing values (geom_point). 8.1.4.2 Replicando um gráfico para cada categoria de uma variável Uma funcionalidade muito útil do ggplot2 é a possibilidade de usar facets para replicar um gráfico para cada categoria de uma variável. imdb %&gt;% filter(classificacao %in% c(&quot;Livre&quot;, &quot;A partir de 13 anos&quot;)) %&gt;% ggplot() + geom_point(aes(x = orcamento, y = nota_imdb)) + facet_wrap(~classificacao, nrow = 2) ## Warning: Removed 85 rows containing missing values (geom_point). Repare que usamos uma fórmula para dizer à função qual variável vamos utilizar para quebrar o gráfico. Podemos especificar se queremos os gráficos lado a lado ou um embaixo do outro pelos argumentos nrow= e ncol=. imdb %&gt;% filter(classificacao %in% c(&quot;Livre&quot;, &quot;A partir de 13 anos&quot;)) %&gt;% ggplot() + geom_point(aes(x = orcamento, y = nota_imdb)) + facet_wrap(~classificacao, ncol = 2) ## Warning: Removed 85 rows containing missing values (geom_point). Exercício relâmpago! Pesquise o que faz a função facet_grid(). 8.1.4.3 Juntando gráficos diferentes Diversos outros pacotes trazem ferramentas super úteis para trabalharmos com o ggplot2. Um deles é o pacote patchwork. Após carregá-lo, podemos juntar dois gráficos com um simples +. # Instale antes de carregar # devtools::install_github(&quot;thomasp85/patchwork&quot;) library(patchwork) p1 &lt;- imdb %&gt;% filter(diretor == &quot;Steven Spielberg&quot;) %&gt;% group_by(ano) %&gt;% summarise(nota_media = mean(nota_imdb, na.rm = TRUE)) %&gt;% ggplot() + geom_line(aes(x = ano, y = nota_media)) ## `summarise()` ungrouping output (override with `.groups` argument) p2 &lt;- imdb %&gt;% mutate(lucro = receita - orcamento) %&gt;% filter(diretor == &quot;Steven Spielberg&quot;) %&gt;% ggplot() + geom_histogram( aes(x = lucro), fill = &quot;lightblue&quot;, color = &quot;darkblue&quot;, binwidth = 100000000 ) p1 + p2 ## Warning: Removed 1 rows containing non-finite values (stat_bin). 8.1.5 Personalizando Como exemplo de personalização de um gráfico com o ggplot2, vamos partir de um simples boxplot e fazer diversas alterações no seu visual. O gráfico inicial é construído da seguinte forma: imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor)) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). 8.1.5.1 Removendo totalmente a legenda Existem diversas maneiras para remover a legenda de um gráfico no ggplot2. A forma mais simples é usar o argumento show.legend = FALSE dentro do geom. imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor), show.legend = FALSE) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). 8.1.5.2 Mexendo na escala Para mudar qualquer aspecto estético da escala, usamos a família de funções scale_(). No caso, vamos deixar a escala do eixo y no formato de dólares. imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor), show.legend = FALSE) + scale_y_continuous(labels = scales::dollar) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). Repare que para cada tipo de atributo, existe uma função scale_() correspondente. 8.1.5.3 Alterando a ordem das categorias Para alterar a ordem que as categorias de uma variável aparecem no gráfico, podemos utilizar o argumento breaks= da função scale_(). imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor), show.legend = FALSE) + scale_y_continuous(labels = scales::dollar) + scale_x_discrete( limits = c(&quot;Woody Allen&quot;, &quot;Quentin Tarantino&quot;, &quot;Steven Spielberg&quot;) ) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). Também é possível fazer isso usando as funções do pacote forcats, apresentado com detalhes aqui. 8.1.5.4 Escolhendo cores manualmente O pacoteggplot2 utiliza uma palheta de cores padrão. Se você quiser especificar as suas próprias cores, faça isso utilizando a função scale_(). imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor), show.legend = FALSE) + scale_y_continuous(labels = scales::dollar) + scale_x_discrete( limits = c(&quot;Woody Allen&quot;, &quot;Quentin Tarantino&quot;, &quot;Steven Spielberg&quot;) ) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). 8.1.5.5 Modificando o visual do gráfico Podemos mudar aspectos visuais do gráfico, como fontes, cores e estilos dos textos, grids, marcações, cor do fundo etc, a partir da função theme(). No exemplo abaixo, eliminamos o texto e as marcações do eixo \\(x\\). imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor)) + scale_y_continuous(labels = scales::dollar) + scale_x_discrete( limits = c(&quot;Woody Allen&quot;, &quot;Quentin Tarantino&quot;, &quot;Steven Spielberg&quot;) ) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). 8.1.5.6 Modificando a posição da legenda É possível controlar a posição da legenda facilmente escolhendo uma das posições: left, right, top e bottom. imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor)) + scale_y_continuous(labels = scales::dollar) + scale_x_discrete( limits = c(&quot;Woody Allen&quot;, &quot;Quentin Tarantino&quot;, &quot;Steven Spielberg&quot;) ) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) + theme( axis.text.x = element_blank(), axis.ticks.x = element_blank(), legend.position = &quot;bottom&quot; ) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). Existem alguns temas já prontos disponíveis no ggplot2. Veja alguns exemplos. imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor), show.legend = FALSE) + scale_y_continuous(labels = scales::dollar) + scale_x_discrete( limits = c(&quot;Woody Allen&quot;, &quot;Quentin Tarantino&quot;, &quot;Steven Spielberg&quot;) ) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) + theme_bw() ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor), show.legend = FALSE) + scale_y_continuous(labels = scales::dollar) + scale_x_discrete( limits = c(&quot;Woody Allen&quot;, &quot;Quentin Tarantino&quot;, &quot;Steven Spielberg&quot;) ) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) + theme_minimal() ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor), show.legend = FALSE) + scale_y_continuous(labels = scales::dollar) + scale_x_discrete( limits = c(&quot;Woody Allen&quot;, &quot;Quentin Tarantino&quot;, &quot;Steven Spielberg&quot;) ) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) + theme_dark() ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). 8.1.5.7 Acrescentando título Para acrescentar um título ao seu gráfico, utilize a função ggtitle(). imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;, &quot;Woody Allen&quot;)) %&gt;% ggplot() + geom_boxplot(aes(x = diretor, y = receita, fill = diretor), show.legend = FALSE) + scale_y_continuous(labels = scales::dollar) + scale_x_discrete( limits = c(&quot;Woody Allen&quot;, &quot;Quentin Tarantino&quot;, &quot;Steven Spielberg&quot;) ) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;)) + theme_minimal() + ggtitle(&quot;Meu boxplot bonitão&quot;) ## Warning: Removed 4 rows containing non-finite values (stat_boxplot). 8.1.6 Onde continuar estudando? O pacote ggplot2 tem incontáveis funcionalidades, principalmente na hora de personalizar o seu gráfico. Abordamos aqui apenas algumas poucas delas. Para continuar aprendendo, sugerimos as seguintes referências: O capítulo de visualizações do R4DS é um ótimo material para fixar os conceitos básicos. O capítulo de gráficos do livro R Cookbook é um bom material de consulta para relembrar velhos truques e descobrir novas formas de personalizar seu gráfico. O site ggplot2 extensions tem uma galeria com diversos pacotes que deixam o ggplot2 bem mais poderoso, indo de novos geoms até animações. library(ggridges) imdb %&gt;% filter(ano &gt; 2005) %&gt;% mutate(ano = as.factor(ano)) %&gt;% ggplot(aes(y = ano, x = receita, fill = ano)) + geom_density_ridges(na.rm = TRUE, show.legend = FALSE) ## Picking joint bandwidth of 17300000 8.1.7 Exercícios 1. O que tem de errado no código abaixo? Por que os pontos não ficaram azuis? ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = &quot;blue&quot;)) 2. Mapeie uma variável contínua para uma cor, tamanho e forma. Como essas formas estéticas se comportam diferente para variáveis categóricas vs contínuas? 3. O que acontece se você rodar ggplot(data = mtcars)? 4. Utilizando o mtcars, faça um gráfico de dispersão de mpg por qsec. 5. Utilizando o mtcars, o que acontece se você fizer um gráfico de dispersão de vs por mpg? Por que o gráfico não é útil? "]]
