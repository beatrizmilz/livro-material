[
["index.html", "Ciência de Dados em R Sobre", " Ciência de Dados em R Curso-R Última atualização: 22/05/2020 Sobre Este livro está em construção e em revisão aberta. Fique à vontade para corrigir qualquer tipo de erro que encontrar no nosso material. Todo o conteúdo deste livro é gratuito e aberto. O R e o RStudio O R é uma linguagem de programação open source para análise de dados que fornece uma grande variedade de ferramentas estatísticas e gráficas. O RStudio é o ambiente de desenvolvimento mais utilizado para programação em R. Ele possui diversas ferramentas que facilitam a utilização do R para se fazer análise de dados. Este livro Este livro tem como objetivo guiar o leitor por todas as etapas de uma análise de dados, utilizando o R como ferramenta. Comunidade Seja bem-vinda(o) ao #rstats. Compartilhe seu desenvolvimento! Poste seus avaços nas redes sociais, compartilhe suas dúvidas em fóruns, procure e participe dos grupos e comunidades de programadores. Comunidade RLadies: https://benubah.github.io/r-community-explorer/rladies.html Fórum de dúvidas da Curso-R: https://discourse.curso-r.com/ Grupo de divulgação da Curso-R no Telegram: https://t.me/r6cursor Grupo R Brasil no Telegram: https://t.me/rbrasiloficial A Curso-R A Curso-R é o braço de Educação da R6 Consultoria, uma empresa de treinamentos e consultoria em Ciência de Dados e linguagem de programação R. Surgimos em 2015, com cursos de introdução ao R no Programa de Cursos de Verão do Instituto de Matemática e Estatística da Universidade de São Paulo (IME-USP). Conheça os nossos cursos: https://www.curso-r.com/cursos/ Conheça o nosso blog: https://www.curso-r.com/blog/ Conheça o restante do nosso material: https://www.curso-r.com/material/ Saiba mais sobre a Curso-R: https://www.curso-r.com/sobre/ "],
["1-instalacao.html", "Capítulo 1 Instalação", " Capítulo 1 Instalação Nesta seção, abordaremos como instalar o R e o RStudio no Linux e no Windows. Também discutiremos sobre a instalação de pacotes no R. "],
["1-1-instalação-do-r.html", "1.1 Instalação do R", " 1.1 Instalação do R A instalação padrão do R é feita a partir do CRAN, uma rede servidores espalhada pelo mundo que armazena versões idênticas e atualizadas de códigos e documentações para o R. Sempre que for instalar algo do CRAN, utilize o servidor (mirror) mais próximo de você. 1.1.1 No Windows Para instalar o R no Windows, siga os seguintes passos: Acesse o CRAN: https://cran.r-project.org/bin/windows/base/ Clique em “Download R x.x.x for Windows”, sendo x.x.x o número da versão mais recente disponível. Salve o arquivo em qualquer pasta do seu computador. Clique no arquivo duas vezes com o botão esquerdo e siga as instruções para instalação. Na etapa de escolher a pasta de destino da instalação, se você escolher um local que não esteja dentro da sua pasta de usuário, você precisará de acesso de administrador. Se escolher uma pasta dentro da sua paste de usuário, não precisará. Pronto! O R está instalado no seu computador! 1.1.2 No Linux Como a instalação no Linux depende da distribuição utilizada e, em geral, usuário de Linux são mais experientes, vamos informar apenas as coordenadas até as instruções/arquivos de instalação para cada distribuição. Se você tiver alguma dificuldade durante o processo, por favor envie a sua dúvida para a nossa comunidade ou para o e-mail duvidas@curso-r.com. Faremos o possível para ajudar. Acesse o CRAN: https://cran.r-project.org/ Clique em Download R for Linux. Clique no link referente à distribuição que você utiliza. Siga as instruções contidas na página para instalar o R. "],
["1-2-instalação-do-rstudio.html", "1.2 Instalação do RStudio", " 1.2 Instalação do RStudio Agora vamos instalar a versão open source do RStudio, a IDE que utilizaremos para escrever e executar códigos em R. 1.2.1 No Windows Para instalar o RStudio no Windows, siga os seguintes passos: Entre no site da Rstudio: https://rstudio.com No topo da página, clique em download. 2a. Se você tiver acesso administrador, baixe a versão que está na lista de All Installers. 2b. Se você não tiver acesso de administrador, faça o download da versão que está na lista Zip/Tarballs. Instalando se você for administrador Clique duas vezes no arquivo que você baixou da página do RStudioe siga as instruções de instalação. Pronto! O RStudio está pronto para ser utilizado. Instalação se você não for administrador Clique com o botão direito no arquivo baixado e depois em Extrair Tudo conforme a imagem. Após a descompactação do arquivo ter sido finalizada, você terá uma pasta chamada: RStudio-x.x.x, em que x.x.x é o número da versão baixada. Abra essa pasta e entre na subpasta com nome bin. Procure pelo arquivo chamado rstudio e clique duas vezes. Isso abrirá o RStudio. Recomendo fixar o programa na barra de tarefas para não precisar repetir essa etapa sempre que for abrir o programa. Observação: se você excluir a pasta que extraímos, o RStudio irá parar de funcionar. 1.2.2 No Linux Entre no site da Rstudio: https://rstudio.com No topo da página, clique em download. Clique no link referente à distribuição que você utiliza para fazer o download do arquivo de instalação. A depender da sua distribuição do Linux, instale o arquivo baixado. "],
["2-rstudio.html", "Capítulo 2 RStudio", " Capítulo 2 RStudio O RStudio é sem dúvidas o mais completo ambiente de desenvolvimento para programação em R. Descubra aqui as funcionalidades do RStudio que nos permitem escrever códigos e analisar resultados de forma muito mais eficiente. "],
["2-1-telas.html", "2.1 Telas", " 2.1 Telas Ao abrir o RStudio, você verá 4 quadrantes. Observe a figura abaixo. Esses quadrantes representam o editor, o console, o environment e o output. Eles vêm nesta ordem, mas você pode organizá-los da forma que preferir acessando a seção Pane Layout da opção Global options... no menu Tools. O editor e o console são os dois principais painéis do RStudio. Passaremos a maior parte do tempo neles. Editor/Scripts: é onde escrevemos nossos códigos. Repare que o RStudio colore algumas palavras e símbolos para facilitar a leitura do código. Console: é onde rodamos o código e recebemos as saídas. O R vive aqui! Os demais painéis são auxiliares. O objetivo deles é facilitar pequenas tarefas que fazem parte tanto da programação quanto da análise de dados, como olhar a documentação de funções, analisar os objetos criados em uma sessão do R, procurar e organizar os arquivos que compõem a nossa análise, armazenar e analisar os gráficos criados e muito mais. Environment: painel com todos os objetos criados na sessão. History: painel com um histórico dos comandos rodados. Files: mostra os arquivos no diretório de trabalho. É possível navegar entre diretórios. Plots: painel onde os gráficos serão apresentados. Packages: apresenta todos os pacotes instalados e carregados. Help: janela onde a documentação das funções serão apresentadas. Viewer: painel onde relatórios e dashboards serão apresentados. "],
["2-2-atalhos.html", "2.2 Atalhos", " 2.2 Atalhos Conhecer os atalhos do teclado ajuda bastante quando estamos programando no RStudio. Veja os principais: CTRL+ENTER: avalia a linha selecionada no script. O atalho mais utilizado. ALT+-: cria no script um sinal de atribuição (&lt;-). Você o usará o tempo todo. CTRL+SHIFT+M: (%&gt;%) operador pipe. Guarde esse atalho, você o usará bastante. CTRL+1: altera cursor para o script. CTRL+2: altera cursor para o console. CTRL+ALT+I: cria um chunk no R Markdown. CTRL+SHIFT+K: compila um arquivo no R Markdown. ALT+SHIFT+K: janela com todos os atalhos disponíveis. No MacBook, os atalhos geralmente são os mesmos, substituindo o CTRL por command e o ALT por option. "],
["2-3-projetos.html", "2.3 Projetos", " 2.3 Projetos Uma funcionalidade muito importante do RStudio é a possibilidade de criar projetos. Um projeto nada mais é do que uma pasta no seu computador. Nessa pasta, estarão todos os arquivos que você usurá ou criará na sua análise. A principal razão de utilizarmos projetos é organização. Com eles, fica muito mais fácil importar bases de dados para dentro do R, criar análises reprodutíveis e compartilhar o nosso trabalho. Você que está começando agora no R, já se habitue a criar um novo projeto para cada nova análise que for fazer. Para criar um projeto, clique em New Project... no Menu File. Na caixa de diálogo que aparecerá, clique em New Directory para criar o projeto em uma nova pasta ou Existing Directory para criar em uma pasta existente. Se você tiver o Git instalado, você também pode usar projetos para conectar com repositórios do Github e outras plataformas de desenvolvimento. Para isso, basta clicar em Version Control. Criando um projeto, o RStudio criará na pasta escolhida um arquivo nome-do-projeto.Rproj. Você pode usar esse arquivo para iniciar o RStudio já com o respectivo projeto aberto. Quando um projeto estiver aberto no RStudio, o seu nome aparecerá no canto superior direito da tela. Na aba Files, aparecerão todos os arquivos contidos no projeto. Você pode criar livremente novas pastas dentro da pasta do projeto. Por padrão, o R sempre começará a procurar arquivos na pasta raiz do projeto (é a pasta que contem o nome-do-projeto.Rproj). Uma maneira fácil de navegar entre projetos é utilizar o menu disponibilizado quando clicamos no nome do projeto. Veja a figura a seguir. Nesse menu, além de podermos criar novos projetos ou abrir projetos já existentes, também temos um acesso rápido a projetos abertos recentemente. Basta clicar em qualquer um deles para trocar de projeto, isto é, deixar de trabalhar em uma análise e começar a trabalhar em outra. A seguir, apresentamos algumas estruturas de organização de projetos no RStudio. Estrutura 1. Por extensão de arquivo. nome_do_projeto/ - .Rprofile # códigos para rodar assim que abrir o projeto - R/ # Código R, organizado com a-carrega.R, b-prepara bd.R, c-vis.R, d-modela, ... - RData/ # Dados em formato .RData - csv/ # Dados em .csv - png/ # gráficos em PNG - nome_do_projeto.Rproj Estrutura 2. Típico projeto de análise estatística. project/ - README.Rmd # Descrição do pacote - set-up.R # Pacotes etc - R/ # Código R, organizado com 0-load.R, 1-tidy.R, 2-vis.R, ... - data/ # Dados (estruturados ou não) - figures/ # gráficos (pode ficar dentro de output/) - output/ # Relatórios em .Rmd, .tex etc - project.Rproj Estrutura 3. Pacote do R. project/ - README.md # Descrição do pacote - DESCRIPTION # Metadados estruturados do pacote e dependências - NAMESPACE # importações e exportações do pacote - vignettes/ # Relatórios em .Rmd - R/ # Funções do R - data/ # Dados estruturados (tidy data) - data-raw/ # Dados não estruturados e arqs 0-load.R, 1-tidy.R, 2-vis.R, ... - project.Rproj "],
["2-4-git-e-versionamento.html", "2.4 Git e versionamento", " 2.4 Git e versionamento "],
["2-5-cheatsheets.html", "2.5 Cheatsheets", " 2.5 Cheatsheets O RStudio tem à disposição algumas folhas de cola, as cheatsheets. Elas trazem um resumão de como utilizar diversos pacotes e até o próprio RStudio. Para acessá-las, basta clicar no menu Help e então em Cheatsheets. "],
["2-6-addins.html", "2.6 Addins", " 2.6 Addins "],
["2-7-snippets.html", "2.7 Snippets", " 2.7 Snippets "],
["3-r-base.html", "Capítulo 3 R Básico", " Capítulo 3 R Básico Introduziremos aqui os principais conceitos de programação em R. Indicamos a leitura deste capítulo a quem nunca teve contato com uma linguagem de programação ou a quem gostaria de entender um pouco melhor a estrutura de objetos, funções e classes do R. Os tópicos discutidos aqui são especialmente importantes para entendermos o que é um data frame, a nossa base de dados dentro do R, e quais operações estão sendo realizadas por trás das cortinas quando estivermos filtrando suas linhas ou modificando suas colunas. Também são importantes para começarmos a criar as nossas próprias funções, o que deixa nossos códigos muito mais organizados, eficientes e compartilháveis. "],
["3-1-pedindo-ajuda.html", "3.1 Pedindo Ajuda", " 3.1 Pedindo Ajuda A linguagem R é bem intuitiva. É possível fazer bastante coisa à base da tentativa e erro. Além disso, grande parte do conhecimento é escalável, isto é, aprender a utilizar uma função é meio caminho andado para aprender todas as outras funções que operam de forma semelhante1. No entanto, a intuição não infalível, e recorrentemente vamos precisar de ajuda para rodar alguma função ou descobrir como fazer alguma tarefa no R. Felizmente, a comunidade R é bem ativa e existem vários lugares para buscar respostas. Nesta seção, vamos apresentar as principais maneiras algumas dessas maneiras. No R, há quatro principais entidades para se pedir ajuda: Help/documentação do R Google Stack Overflow Coleguinha A busca por ajuda é feita preferencialmente, mas não necessariamente, na ordem acima. 3.1.1 Documentação do R A documentação do R serve para você aprender a usar uma determinada função. Se você não sabe o que é uma função, não se preocupe. Discutiremos esse tópico na Seção 3.11. Você pode acessar a documentação de uma função2 das seguintes maneiras: ?mean help(mean) Algumas dicas: Leia a seção Usage para ter noção de como usar a função. Os parâmetros da função estão descritos em Arguments. Os exemplos no final são particularmente úteis. Caso essa função não atenda às suas necessidades, a seção See Also sugere funções relacionadas. Alguns pacotes possuem tutorias de uso mais completos. Esses textos são chamados de vignettes e podem ser acessados com a função vignette(package = 'nomeDoPacote'). Por exemplo, vignette(package = 'dplyr'). 3.1.2 Google Há uma comunidade gigantesca de usuários de R gerando diariamente uma infinidade de conteúdos e discussões. Não raramente, você irá encontrar discussões sobre o seu problema simplesmente o descrevendo no Google. Pesquisas em inglês aumentam consideravelmente a chance de encontrar uma resposta. Quando você recebe um erro na tentativa de rodar algum código no R e não sabe o que está errado, uma boa estratégia é pesquisar a mensagem de erro no Google. Essa deve ser sua primeira tentativa para resolver o problema. Repare na imagem abaixo o ‘r’ adicionado na busca. Isso ajuda bastante a encontrar uma solução. log(&quot;5&quot;) ## Error in log(&quot;5&quot;): non-numeric argument to mathematical function 3.1.3 Stack Overflow O Stack Overflow e o Stack Overflow em Português são sites de Pergunta e Resposta amplamente utilizados por todas as linguagens de programação, e o R é uma delas. Nos EUA, chegam até a usar a reputação dos usuários dentro da plataforma como diferencial no currículo! Provavelmente o Google lhe indicará uma página deles quando você estiver procurando ajuda. E quando todas as fontes possíveis de ajuda falharem, o Stack Overflow lhe dará o espaço para criar sua própria pergunta. Um ponto importante: como fazer uma boa pergunta no Stack Overflow? No site, existe um tutorial com uma lista de boas práticas, que se encontra aqui. Resumindo, as principais dicas são ser conciso; ser específico; ter mente aberta; e ser gentil. Porém, no caso do R, há outro requisito que vai aumentar muito sua chance de ter uma boa resposta: exemplinho minimal e reprodutível. Ser minimal: usar bancos de dados menores e utilizar pedaços de códigos apenas suficientes para apresentar o seu problema. Não precisa de banco de dados de um milhão de linhas e nem colocar o seu código inteiro para descrever a sua dúvida. Ser reprodutível: o seu código deve rodar fora da sua máquina. Se você não fornecer uma versão do seu problema que rode (ou que imite seu erro), as pessoas vão logo desistir de te ajudar. Por isso, nunca coloque bancos de dados que só você tem acesso. Use bancos de dados que já vem no R ou disponibilize um exemplo (possivelmente anonimizado) em .csv na web para baixar. E se precisar utilizar funções de algum pacote, especifique os pacotes que você usou. Essa ideia é um dos princípios por trás do tidyverse.↩︎ Bases de dados presentes em pacotes também têm documentação, e geralmente é possível encontrar o significado de cada variável nela. Por exemplo, help(mtcars).↩︎ "],
["3-2-r-como-calculadora.html", "3.2 R como calculadora", " 3.2 R como calculadora O papel do Console no R é executar os nossos comandos. Ele avalia o código que passamos para ele e devolve a saída correspondente — se tudo der certo — ou uma mensagem de erro — se o seu código tiver algum problema. Vamos começar com o exemplo mais simples possível: 1 + 1 ## [1] 2 Nesse caso, o nosso comando foi o código 1 + 1 e a saída foi o valor 2. Nota: quando compilamos? Quem vem de linguagens como o C ou Java espera que seja necessário compilar o código em texto para o código das máquinas (geralmente um código binário). No R, isso não é necessário. O R é uma linguagem de programação dinâmica que interpreta o seu código enquanto você o executa. Tente agora jogar no console a expressão: 2 * 2 - (4 + 4) / 2. Pronto! Você já é capaz de pedir ao R para fazer qualquer uma das quatro operações aritméticas básicas. A seguir, apresentamos uma lista resumindo como fazer as principais operações no R. # adição 1 + 1 ## [1] 2 # subtração 4 - 2 ## [1] 2 # multiplicação 2 * 3 ## [1] 6 # divisão 5 / 3 ## [1] 1.666667 # potência 4 ^ 2 ## [1] 16 # resto da divisão de 5 por 3 5 %% 3 ## [1] 2 # parte inteira da divisão de 5 por 3 5 %/% 3 ## [1] 1 Repare que as operações e suas precedências são mantidas como na matemática, ou seja, divisão e multiplicação são calculadas antes da adição e subtração. E os parênteses nunca são demais! Uma outra forma de executar uma expressão é escrever o código em um script, deixar o cursor em cima da linha e usar o atalho Ctrl + Enter. Assim, o comando é enviado para o Console, onde é diretamente executado. Essa operação é chamada de avaliar, executar ou rodar o código. Se você digitar um comando incompleto, como 5 +, e apertar Enter, o R mostrará um +, o que não tem nada a ver com a adição da matemática. Isso significa que o R está esperando que você enviar mais algum código para completar o seu comando. Termine o seu comando ou aperte Esc para recomeçar. &gt; 5 - + + 5 [1] 0 Se você digitar um comando que o R não reconhece, ele retornará uma mensagem de erro. NÃO ENTRE EM PÂNICO! Ele só está avisando que não conseguiu interpretar o comando. Você pode digitar outro comando normalmente em seguida. &gt; 5 % 2 Error: unexpected input in &quot;5 % 2&quot; &gt; 5 ^ 2 [1] 25 Exercícios 1. Qual a diferença entre o R e o RStudio? 2. Precisamos compilar nossos códigos de R? 3. Calcule o número de ouro no R. Dica: o número de ouro é dado pela expressão \\(\\frac{1 + \\sqrt{5}}{2}\\). "],
["3-3-objetos.html", "3.3 Objetos", " 3.3 Objetos O R te permite salvar valores dentro de um objeto. Um objeto é simplesmente um nome que guarda um valor. Para criar um objeto, utilizamos o operador &lt;-. No exemplo abaixo, salvamos o valor 1 em a. Sempre que avaliarmos o objeto a, o R vai devolver o valor 1. # Salvando `1` em `a` a &lt;- 1 # Avaliando o objeto `a` a ## [1] 1 Existem algumas regras para dar nomes aos objetos. A mais importante é: o nome deve começar com uma letra3. O nome pode conter números, mas não pode começar com números. Você pode usar pontos . e underlines _ para separar palavras. # Permitido x &lt;- 1 x1 &lt;- 2 objeto &lt;- 3 meu_objeto &lt;- 4 meu.objeto &lt;- 5 # Não permitido 1x &lt;- 1 _objeto &lt;- 2 meu-objeto &lt;- 3 Atenção! O R diferencia letras maiúsculas e minúsculas, isto é, b é considerado um objeto diferente de B. Rode o exemplo abaixo e observe que dois objetos diferentes são criados no Environment. b &lt;- 2 B &lt;- 3 b ## [1] 2 B ## [1] 3 O objeto mais importante para o cientista de dados é, claro, a base de dados. No R, uma base de dados é representa por objetos chamados de data frames. A seguir, vamos entender o que são esses objetos. Ou com um ponto.↩︎ "],
["3-4-data-frames.html", "3.4 Data frames", " 3.4 Data frames Os data frames são de extrema importância no R, pois são os objetos que guardam os nossos dados. Eles são equivalentes a uma tabela do SQL ou uma planilha do Excel. A principal característica de um data frame é possuir linhas e colunas4. Veja o exemplo abaixo: mtcars ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 O mtcars é um data frame nativo do R que contém informações sobre diversos modelos de carros. Ele possui 32 linhas e 11 colunas5. Se você quiser saber mais sobre o mtcars, veja a documentação dele rodando ?mtcars no Console. Nos próximos capítulos, os data frames serão o nosso principal objeto de estudo. Aprenderemos a selecionar, criar e modificar colunas, filtrar e ordenar linhas, juntar dois data frames e, a partir deles, construiremos gráficos e ajustaremos modelos. Mas, da mesma forma que é muito mais fácil aprendermos a fritar um ovo após entendermos o que é o fogo, uma frigideira e um ovo, vamos estudar nas próximas seções quais são as estruturas que formam os data frames e como manipulá-las. Você pode construir um data frame vazio, com 0 linha e 0 coluna. No entanto, a estrutura de linhas e colunas estará presente.↩︎ A primeira “coluna” representa apenas o nome das linhas (modelo do carro), não é uma coluna da base. Repare que ela não possui um nome, como as outras. Essa estrutura de nome de linha é própria de data frames no R. Se exportássemos essa base para o Excel, por exemplo, essa coluna não apareceria.↩︎ "],
["3-5-classes.html", "3.5 Classes", " 3.5 Classes A classe de um objeto é muito importante dentro do R. É a partir dela que as funções e operadores conseguem saber exatamente o que fazer com um objeto. Por exemplo, podemos somar dois números, mas não conseguimos somar duas letras (texto): 1 + 1 ## [1] 2 &quot;a&quot; + &quot;b&quot; ## Error in &quot;a&quot; + &quot;b&quot;: non-numeric argument to binary operator O operador + verifica que \"a\" e \"b\" não são números (ou que a classe deles não é numérica) e devolve uma mensagem de erro informando isso. Observe que para criar texto no R, colocamos os caracteres entre aspas. As aspas servem para diferenciar nomes (objetos, funções, pacotes) de textos (letras e palavras). Os textos são muito comuns em variáveis categóricas. a &lt;- 10 # O objeto `a`, sem aspas a ## [1] 10 # A letra (texto) `a`, com aspas &quot;a&quot; ## [1] &quot;a&quot; Para saber a classe de um objeto, basta rodarmos class(nome-do-objeto). x &lt;- 1 class(x) ## [1] &quot;numeric&quot; y &lt;- &quot;a&quot; class(y) ## [1] &quot;character&quot; class(mtcars) ## [1] &quot;data.frame&quot; As classes mais básicas dentro do R são: numeric character logical Veja alguns exemplos: # numeric 1 0.10 0.95 pi # characters &quot;a&quot; &quot;1&quot; &quot;positivo&quot; # logical TRUE FALSE Um objeto de qualquer uma dessas classes é chamado de objeto atômico. Esse nome se deve ao fato de essas classes não se misturarem, isto é, para um objeto ter a classe numeric, por exemplo, todos os seus valores precisam ser numéricos. Mas como atribuir mais de um valor a um mesmo objeto? Para isso, precisamos criar vetores. "],
["3-6-vetores.html", "3.6 Vetores", " 3.6 Vetores Vetores são estruturas muito importantes dentro R. Em especial, pensando em análise de dados, precisamos estudá-los pois cada coluna de um data frame será representada como um vetor. Vetores no R são apenas conjuntos indexados de valores. Para criá-los, basta colocar os valores separados por vírgulas dentro de um c(). vetor1 &lt;- c(1, 5, 3, -10) vetor2 &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) vetor1 ## [1] 1 5 3 -10 vetor2 ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; Os objetos vetor1 e vetor2 são vetores. Uma maneira fácil de criar um vetor com uma sequência de números é utilizar o operador :. # Vetor de 1 a 10 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 # Vetor de 10 a 1 10:1 ## [1] 10 9 8 7 6 5 4 3 2 1 # Vetor de -3 a 3 -3:3 ## [1] -3 -2 -1 0 1 2 3 Quando dizemos que vetores são conjuntos indexados, isso quer dizer que cada valor dentro de um vetor tem uma posição. Essa posição é dada pela ordem em que os elementos foram colocados no momento em que o vetor foi criado. Isso nos permite acessar individualmente cada valor de um vetor. Para isso, colocamos o índice do valor que queremos acessar dentro de colchetes []. vetor &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) vetor[1] ## [1] &quot;a&quot; vetor[2] ## [1] &quot;b&quot; vetor[3] ## [1] &quot;c&quot; vetor[4] ## [1] &quot;d&quot; Você também pode colocar um conjunto de índices dentro dos colchetes, para pegar os valores contidos nessas posições: vetor[c(2, 3)] ## [1] &quot;b&quot; &quot;c&quot; vetor[c(1, 2, 4)] ## [1] &quot;a&quot; &quot;b&quot; &quot;d&quot; Essa operação é conhecida como subsetting, pois estamos pegando subconjuntos de valores de um vetor. Se você tentar acessar uma posição do vetor que não existe, ele retornará NA, indicando que esse valor não existe. Discutiremos o que são NA’s na Seção 3.8. vetor[5] ## [1] NA Um vetor só pode guardar um tipo de objeto e ele terá sempre a mesma classe dos objetos que guarda. Para saber a classe de um vetor, rodamos class(nome-do-vetor). vetor1 &lt;- c(1, 5, 3, -10) vetor2 &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) class(vetor1) ## [1] &quot;numeric&quot; class(vetor2) ## [1] &quot;character&quot; Se tentarmos misturar duas classes, o R vai apresentar o comportamento conhecido como coerção. vetor &lt;- c(1, 2, &quot;a&quot;) vetor ## [1] &quot;1&quot; &quot;2&quot; &quot;a&quot; class(vetor) ## [1] &quot;character&quot; Veja que todos os elementos do vetor se transformaram em texto. Agora temos um vetor com o texto \"1\", o texto \"2\" e o texto \"a\". Como um vetor só pode ter uma classe de objeto dentro dele, classes mais fracas serão sempre reprimidas pelas classes mais fortes. Como regra de bolso: caracteres serão sempre a classe mais forte. Então, sempre que você misturar números e texto em um vetor, os números virarão texto. Falaremos bastante de coerção nas próximas seções e capítulos, trazendo exemplos de quando ela ajuda e de quando ela atrapalha. De forma bastante intuitiva, você pode fazer operações com vetores. vetor &lt;- c(0, 5, 20, -3) vetor + 1 ## [1] 1 6 21 -2 Ao rodarmos vetor1 + 1, o R subtrai 1 de cada um dos elementos do vetor. O mesmo acontece com qualquer outra operação aritmética. vetor - 1 vetor / 2 vetor * 10 Você também pode fazer operações que envolvem mais de um vetor: vetor1 &lt;- c(1, 2, 3) vetor2 &lt;- c(10, 20, 30) vetor1 + vetor2 ## [1] 11 22 33 Neste caso, o R irá alinhar os dois vetores e somar elemento a elemento. Esse tipo de comportamento é chamado de vetorização. Isso pode ficar um pouco confuso quando os dois vetores não possuem o mesmo tamanho. Tente adivinhar qual será a saída do código a seguir: vetor1 &lt;- c(1, 2) vetor2 &lt;- c(10, 20, 30, 40) vetor1 + vetor2 ## [1] 11 22 31 42 Embora estejamos somando dois vetores de tamanho diferentes, o R não devolve um erro (o que parecia ser a resposta mais intuitiva). O R alinhou os dois vetores e, como eles não possuíam o mesmo tamanho, o primeiro foi repetido para ficar do mesmo tamanho do segundo. É como se o primeiro vetor fosse na verdade c(1, 2, 1, 2). Esse comportamento é chamado de reciclagem. Embora contra-intuitiva, a reciclagem é muito útil no R graças a um caso particular muito importante. Quando somamos vetor + 1 no nosso primeiro exemplo, o que o R está fazendo por trás é transformando o 1 em c(1, 1, 1, 1) e realizando a soma vetorizada c(0, 5, 20, -3) + c(1, 1, 1, 1). Isso porque o número 1 nada mais é do que um vetor de tamanho 1, isto é, 1 é igual a c(1). Usaremos esse comportamento no R o tempo todo e é muito importante a reciclagem para termos certeza de que o R está fazendo exatamente aquilo que gostaríamos que ele fizesse. Um outro caso interessante de reciclagem é quando o comprimento dos vetores não são múltiplos um do outro. vetor1 &lt;- c(1, 2, 3) vetor2 &lt;- c(10, 20, 30, 40, 50) vetor1 + vetor2 ## Warning in vetor1 + vetor2: longer object length is not a multiple of shorter ## object length ## [1] 11 22 33 41 52 Neste caso, duas coisas aconteceram: O R realizou a conta, repetindo cada valor do primeiro vetor até que os dois tenham o mesmo tamanho. No fundo, a operação realizada foi c(1, 2, 3, 1, 2) + c(10, 20, 30, 40, 50). Como essa operação é ainda menos intuitiva e raramente desejada, o R devolveu um aviso dizendo que o comprimento do primeiro vetor maior não é um múltiplo do comprimento do vetor menor. "],
["3-7-testes-lógicos.html", "3.7 Testes lógicos", " 3.7 Testes lógicos Poder fazer qualquer tipo de operação lógica é um dos motivos pelos quais programar nos deixar mais eficientes. Dê bastante atenção a elas, pois usaremos comparações lógicas o tempo todo! Uma operação lógica nada mais é do que um teste que retorna verdadeiro ou falso. No R (e em outras linguagens de programação), esses valores dois valores recebem uma classe especial: logical. O verdadeiro no R vai ser representado pelo valor TRUE e o falso pelo valor FALSE. Esses nomes no R são reservados, isto é, você não pode chamar nenhum objeto de TRUE ou FALSE. TRUE &lt;- 1 ## Error in TRUE &lt;- 1 : invalid (do_set) left-hand side to assignment Checando a classe desses valores, vemos que são lógicos6. Eles são os únicos possíveis valores dessa classe. class(TRUE) ## [1] &quot;logical&quot; class(FALSE) ## [1] &quot;logical&quot; Agora que conhecemos o TRUE e FALSE, podemos explorar os teste lógicos. Começando pelo mais simples: vamos testar se um valor é igual ao outro. Para isso, usamos o operador ==. # Testes com resultado verdadeiro 1 == 1 ## [1] TRUE &quot;a&quot; == &quot;a&quot; ## [1] TRUE # Testes com resultado falso 1 == 2 ## [1] FALSE &quot;a&quot; == &quot;b&quot; ## [1] FALSE Também podemos testar se dois valores são diferentes. Para isso, usamos o operador !=. # Testes com resultado falso 1 != 1 ## [1] FALSE &quot;a&quot; != &quot;a&quot; ## [1] FALSE # Testes com resultado verdadeiro 1 != 2 ## [1] TRUE &quot;a&quot; != &quot;b&quot; ## [1] TRUE Para comparar se um valor é maior que outro, temos à disposição 4 operadores: # Maior 3 &gt; 3 ## [1] FALSE 3 &gt; 2 ## [1] TRUE # Maior ou igual 3 &gt; 4 ## [1] FALSE 3 &gt;= 3 ## [1] TRUE # Menor 3 &lt; 3 ## [1] FALSE 3 &lt; 4 ## [1] TRUE # Menor ou igual 3 &lt; 2 ## [1] FALSE 3 &lt;= 3 ## [1] TRUE Um outro operador muito útil é o %in%. Com ele, podemos verificar se um valor está dentro de um conjunto de valores (vetor). 3 %in% c(1, 2, 3) ## [1] TRUE &quot;a&quot; %in% c(&quot;b&quot;, &quot;c&quot;) ## [1] FALSE Nós começamos essa seção dizendo que usaremos testes lógicos o tempo todo. O motivo para isso é que eles fazem parte de uma operação muito comum na manipulação de base de dados: os filtros. No Excel, por exemplo, quando você filtra uma planilha, o que está sendo feito por trás é um teste lógico. Falamos anteriormente que cada coluna das nossas bases de dados será representada dentro do R como um vetor. O comportamento que explica a importância dos testes lógicos na hora de filtrar uma base está ilustrado abaixo: minha_coluna &lt;- c(1, 3, 0, 10, -1, 5, 20) minha_coluna &gt; 3 ## [1] FALSE FALSE FALSE TRUE FALSE TRUE TRUE minha_coluna[minha_coluna &gt; 3] ## [1] 10 5 20 Muitas coisas aconteceram aqui, vamos por partes. Primeiro, na operação minha_coluna &gt; 3 o R fez um excelente uso do comportamento de reciclagem. No fundo, o que ele fez foi transformar (reciclar) o valor 3 no vetor c(3, 3, 3, 3, 3, 3, 3) e testar se c(1, 3, 0, 10, -1, 5, 20) &gt; c(3, 3, 3, 3, 3, 3, 3). Como os operadores lógicos também são vetorizados (fazem operações elemento a elemento), os testes realizados foram 1 &gt; 3, 3 &gt; 3, 0 &gt; 3, 10 &gt; 3, -1 &gt; 3, 5 &gt; 3 e, finalmente, 20 &gt; 3. Cada um desses testes tem o seu próprio resultado. Por isso a saída de minha_coluna &gt; 3 é um vetor de verdadeiros e falsos, respectivos a cada um desses 7 testes. A segunda operação traz a grande novidade aqui: podemos usar os valores TRUE e FALSE para selecionar elementos de um vetor! A regra é muito simples: retornar as posições que receberem TRUE, não retornar as posições que receberem FALSE. Portanto, a segunda operação é equivalente a: minha_coluna[c(FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE)] ## [1] 10 5 20 O vetor lógico filtra o vetor minha_coluna, retornando apenas os valores maiores que 3, já que foi esse o teste lógico que fizemos. Essa é a mágica que acontece por trás de filtros no R. Na prática, não precisaremos usar colchetes, não lembraremos da reciclagem e nem veremos a cara dos TRUE e FALSE. Mas conhecer esse processo é muito importante, principalmente para encontrar problemas de código ou de base. A seguir, apresentamos uma tabela com os principais operadores lógicos: Para finalizar, listamos na tabela abaixo os principais operadores lógicos. Operador Descrição x &lt; y x menor que y? x &lt;= y x menor ou igual a y? x &gt; y x maior que y? x &gt;= y x maior ou igual a y? x == y x igual a y? x != y x diferente de y? !x Negativa de x x | y x ou y são verdadeiros? x &amp; y x e y são verdadeiros? x %in% y x percente a y? xor(x, y) x ou y são verdadeiros (apenas um deles)? Por fim, veja algumas diferenças entre comparações lógicas no SQL e no R: Igualdade: no SQL é só um sinal de igual: 2 = 1. No R são dois: 2 == 1. Diferença: no SQL, usamos &lt;&gt;. No R usamos !=. Negação: em vez de usar a palavra NOT igual ao SQL, usamos ! no R. Por exemplo, id not in ('1', '2', '3') fica !(id %in% c(1, 2, 3)). Também conhecidos como valores binários ou booleanos↩︎ "],
["3-8-valoresEspeciais.html", "3.8 Valores especiais", " 3.8 Valores especiais Vimos anteriormente que se você tentar acessar uma posição que não existe dentro de um vetor, ele retorna um valor estranho. vetor &lt;- c(1, 2, 3) vetor[4] ## [1] NA Esse valor, o NA, é tratado de forma especial no R. Ele representa a ausência de informação, isto é, a informação existe, mas nós (e o R) não sabemos qual é. O NA para o R nada mais é do que o valor faltante ou omisso da Estatística. O famoso missing. Geralmente, quando temos uma base com valores faltando, como a idade para alguns indivíduos da nossa amostra, não significa que a idade deles não existe. Significa apenas que não temos essa informação. Esse conceito é muito importante para entender o resultado da expressão abaixo. 5 == NA ## [1] NA Em um primeiro momento, poderíamos esperar que o resultado fosse TRUE. Mas, sabendo o significado por trás do NA — um valor desconhecido —, a verdadeira pergunta que estamos fazendo é: 5 é igual a um valor que existe, mas que não sei qual é? É como se eu perguntasse se eu tenho 5 moedas na mão, mas lhe mostrasse a mão fechada. A resposta para isso é não sei ou, dentro do R, NA. Um outro exemplo: idade_ana &lt;- 30 idade_beto &lt;- NA idade_carla &lt;- NA idade_ana == idade_beto ## [1] NA idade_beto == idade_carla ## [1] NA Eu posso saber a idade da Ana, mas se eu não souber a idade do Beto, não sei se os dois tem a mesma idade. Por isso, NA. Da mesma forma, se não sei nem a idade do Beto nem da Carla, também não tenho como saber se os dois têm a mesma idade. Outra vez NA. Mas e quando queremos saber se um valor é NA ou não? Para fazer esse teste, temos que rodar is.na(valor-ou-objeto). is.na(NA) ## [1] TRUE is.na(idade_ana) ## [1] FALSE is.na(idade_beto) ## [1] TRUE Repare que essa função também é vetorizada. is.na(c(idade_ana, idade_beto, idade_carla)) ## [1] FALSE TRUE TRUE Assim como o NA, existem outros valores especiais muito comuns no R. O NaN (not a number) representa indefinições matemáticas. 0/0 ## [1] NaN log(-1) ## Warning in log(-1): NaNs produced ## [1] NaN O Inf (infinito) representa um número muito grande (que o computador não consegue representar) ou um limite matemático. # O computador não consegue representar um número tão grande. # O número é então &quot;&quot;&quot;arredondado&quot;&quot;&quot; para infinito. 10^310 ## [1] Inf # Limite matemático. 1 / 0 ## [1] Inf # O &quot;menos infinito&quot; também existe. -1 / 0 ## [1] -Inf O NULL (nulo) representa a ausência de um objeto. Ele não tem significado prático para a análise dados. Está mais em sintonia com comportamentos de lógica de programação. Muitas vezes vamos definir um objeto como nulo para dizer ao R que não queremos dar um valor para ele. Muito utilizado em funções (ver Seção 3.11). Da mesma forma que utilizados is.na() para testar se um objeto é NA, utilizamos is.nan(), is.infinite() ou is.null() para testar se um objeto é NaN, infinito ou nulo. nao_sou_um_numero &lt;- NaN objeto_infinito &lt;- Inf objeto_nulo &lt;- NULL is.nan(nao_sou_um_numero) ## [1] TRUE is.infinite(objeto_infinito) ## [1] TRUE is.null(objeto_nulo) ## [1] TRUE Exercícios 1. Quais as diferenças entre NaN, NULL, NA e Inf? Digite expressões que retornem cada um desses valores. "],
["3-9-listas.html", "3.9 Listas", " 3.9 Listas Chegamos ao último tópico antes de voltarmos aos data frames: as listas. Listas são objetos muito importantes dentro do R. Primeiro porque todo data frame é uma lista. Segundo porque elas são bem parecidas com vetores, mas com uma diferença essencial: você pode misturar diferentes classes de objetos dentro dela. Para criar uma lista, rodamos list(valor1, valor2, valor3). list(1, &quot;a&quot;, TRUE) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] TRUE Veja que não houve coerção. Ainda temos um valor número, um texto e um valor lógico dentro da lista. O subsetting de listas é um pouco diferente do que o de vetores. Isso porque cada elemento de uma lista também é uma lista. Veja o que acontece se tentarmos usar [] para pegar um elemento de uma lista. lista &lt;- list(1, &quot;a&quot;, TRUE) lista[1] ## [[1]] ## [1] 1 class(lista[1]) ## [1] &quot;list&quot; O R nos retorna uma lista com apenas aquele elemento. Se quisermos o elemento de fato dentro de cada posição, precisamos usar dois colchetes: lista[[1]] ## [1] 1 class(lista[[1]]) ## [1] &quot;numeric&quot; Cada elemento de uma lista ser uma lista é importante pois isso nos permite colocar vetores de tamanhos diferentes em cada posição. Isso faz das listas uma estrutura bem flexível para guardar dados. lista &lt;- list(1:3, &quot;a&quot;, c(TRUE, TRUE, FALSE, FALSE)) lista ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] TRUE TRUE FALSE FALSE lista[1] ## [[1]] ## [1] 1 2 3 lista[2] ## [[1]] ## [1] &quot;a&quot; lista[3] ## [[1]] ## [1] TRUE TRUE FALSE FALSE É muito comum darmos nomes para cada posição de uma lista. dados_cliente &lt;- list(cliente = &quot;Ana Silva&quot;, idade = 25, estado_civil = NA) dados_cliente ## $cliente ## [1] &quot;Ana Silva&quot; ## ## $idade ## [1] 25 ## ## $estado_civil ## [1] NA Agora, dentro da lista, o valor Ana Silva, por exemplo, está sendo atribuído ao nome cliente. Esse nome só existirá dentro da lista. Um detalhe importante: os iguais utilizados nas atribuições dos nomes dentro da lista não podem ser substituídos por &lt;-. Quando as posições de uma lista tem nome, podemos acessar seus valores diretamente utilizando o operador $. dados_cliente$cliente ## [1] &quot;Ana Silva&quot; dados_cliente$idade ## [1] 25 dados_cliente$estado_civil ## [1] NA Repare que o R devolve o valor dentro de cada posição, e não uma lista. dados_cliente[1] ## $cliente ## [1] &quot;Ana Silva&quot; dados_cliente$cliente ## [1] &quot;Ana Silva&quot; class(dados_cliente[1]) ## [1] &quot;list&quot; class(dados_cliente$cliente) ## [1] &quot;character&quot; Isto implica que, nesse exemplo, dados_cliente$cliente é equivalente a dados_cliente[[1]]. Conforme ficamos mais e mais proficientes na linguagem R, as listas passam a ficar cada vez mais frequentes. Voltaremos a falar delas diversas vezes nos próximos capítulos, em especial no Capítulo 9. "],
["3-10-mais-sobre-data-frames.html", "3.10 Mais sobre data frames", " 3.10 Mais sobre data frames Chegou a hora de usarmos tudo o que aprendemos na seção anterior para exploramos ao máximo o nosso objeto favorito: o data frame. Na seção anterior, nós dissemos que data frames são listas. Isso é importante pois todas as propriedades de uma lista valem para um data frame. A melhor forma de entender essa equivalência é ver um data frame representado como uma lista. as.list(mtcars) ## $mpg ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 ## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 ## [31] 15.0 21.4 ## ## $cyl ## [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 ## ## $disp ## [1] 160.0 160.0 108.0 258.0 360.0 225.0 360.0 146.7 140.8 167.6 167.6 275.8 ## [13] 275.8 275.8 472.0 460.0 440.0 78.7 75.7 71.1 120.1 318.0 304.0 350.0 ## [25] 400.0 79.0 120.3 95.1 351.0 145.0 301.0 121.0 ## ## $hp ## [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 ## [20] 65 97 150 150 245 175 66 91 113 264 175 335 109 ## ## $drat ## [1] 3.90 3.90 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 3.92 3.07 3.07 3.07 2.93 ## [16] 3.00 3.23 4.08 4.93 4.22 3.70 2.76 3.15 3.73 3.08 4.08 4.43 3.77 4.22 3.62 ## [31] 3.54 4.11 ## ## $wt ## [1] 2.620 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 3.440 4.070 ## [13] 3.730 3.780 5.250 5.424 5.345 2.200 1.615 1.835 2.465 3.520 3.435 3.840 ## [25] 3.845 1.935 2.140 1.513 3.170 2.770 3.570 2.780 ## ## $qsec ## [1] 16.46 17.02 18.61 19.44 17.02 20.22 15.84 20.00 22.90 18.30 18.90 17.40 ## [13] 17.60 18.00 17.98 17.82 17.42 19.47 18.52 19.90 20.01 16.87 17.30 15.41 ## [25] 17.05 18.90 16.70 16.90 14.50 15.50 14.60 18.60 ## ## $vs ## [1] 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1 ## ## $am ## [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 ## ## $gear ## [1] 4 4 4 3 3 3 3 4 4 4 4 3 3 3 3 3 3 4 4 4 3 3 3 3 3 4 5 5 5 5 5 4 ## ## $carb ## [1] 4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 6 8 2 O código acima nos permite ver o data frame mtcars representado como uma lista. Veja que cada coluna da base se transforma em um elemento da lista. E o nome de cada coluna vira o nome de cada posição. Isso é interessante, pois podemos usar nos data frames as mesmas operações que aprendemos para listas. Por exemplo, podemos usar o operador $ para acessar cada elemento da lista, isto é, cada coluna do data frame. mtcars$mpg ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 ## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 ## [31] 15.0 21.4 E assim como cada elemento de uma lista também é uma lista, cada elemento (coluna) de um data frame também é um *data frame. mtcars[1] ## mpg ## Mazda RX4 21.0 ## Mazda RX4 Wag 21.0 ## Datsun 710 22.8 ## Hornet 4 Drive 21.4 ## Hornet Sportabout 18.7 ## Valiant 18.1 ## Duster 360 14.3 ## Merc 240D 24.4 ## Merc 230 22.8 ## Merc 280 19.2 ## Merc 280C 17.8 ## Merc 450SE 16.4 ## Merc 450SL 17.3 ## Merc 450SLC 15.2 ## Cadillac Fleetwood 10.4 ## Lincoln Continental 10.4 ## Chrysler Imperial 14.7 ## Fiat 128 32.4 ## Honda Civic 30.4 ## Toyota Corolla 33.9 ## Toyota Corona 21.5 ## Dodge Challenger 15.5 ## AMC Javelin 15.2 ## Camaro Z28 13.3 ## Pontiac Firebird 19.2 ## Fiat X1-9 27.3 ## Porsche 914-2 26.0 ## Lotus Europa 30.4 ## Ford Pantera L 15.8 ## Ferrari Dino 19.7 ## Maserati Bora 15.0 ## Volvo 142E 21.4 class(mtcars[1]) ## [1] &quot;data.frame&quot; Mas se data frames são listas, por que existe a classe data frame? Na verdade, data frames são um tipo especial de listas, que têm as seguintes propriedades: Todos os seus elementos (colunas) precisam ter o mesmo comprimento (número de linhas). Todos os seus elementos (colunas) precisam ser nomeados. Data frames têm 2 dimensões. As propriedades (1) e (2) se devem ao formato das bases de dados. Elas são retangulares7 — observamos as mesmas variáveis (colunas) para todas as unidades amostrais (linhas)8 —, e precisam ter algum nome especificando as colunas. Da mesma forma que podemos ver um data frame como uma lista, também podemos fazer o inverso. dados_cliente &lt;- list( cliente = c(&quot;Ana Silva&quot;, &quot;Beto Pereira&quot;, &quot;Carla Souza&quot;), idade = c(25, 30, 23), estado_civil = c(NA, &quot;Solteiro&quot;, &quot;Casada&quot;) ) dados_cliente ## $cliente ## [1] &quot;Ana Silva&quot; &quot;Beto Pereira&quot; &quot;Carla Souza&quot; ## ## $idade ## [1] 25 30 23 ## ## $estado_civil ## [1] NA &quot;Solteiro&quot; &quot;Casada&quot; as.data.frame(dados_cliente) ## cliente idade estado_civil ## 1 Ana Silva 25 &lt;NA&gt; ## 2 Beto Pereira 30 Solteiro ## 3 Carla Souza 23 Casada Quando tivermos valores faltantes na nossa base (células vazias no Excel), eles serão representados por NA nos data frames. Observe que não conseguimos transformar uma lista em data frame se os elementos da lista não tiverem o mesmo comprimento. dados_cliente &lt;- list( cliente = c(&quot;Ana Silva&quot;, &quot;Beto Pereira&quot;, &quot;Carla Souza&quot;), idade = c(25, 30), estado_civil = c(NA, &quot;Solteiro&quot;, &quot;Casada&quot;) ) as.data.frame(dados_cliente) ## Error in (function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE, : arguments imply differing number of rows: 3, 2 Transformar uma lista não nomeada em data frame é possível, mas o R cria nomes nada agradáveis para as colunas. dados_cliente &lt;- list( c(&quot;Ana Silva&quot;, &quot;Beto Pereira&quot;, &quot;Carla Souza&quot;), c(25, 30, 23), c(NA, &quot;Solteiro&quot;, &quot;Casada&quot;) ) as.data.frame(dados_cliente) ## c..Ana.Silva....Beto.Pereira....Carla.Souza.. c.25..30..23. ## 1 Ana Silva 25 ## 2 Beto Pereira 30 ## 3 Carla Souza 23 ## c.NA...Solteiro....Casada.. ## 1 &lt;NA&gt; ## 2 Solteiro ## 3 Casada A propriedade (3) é atribuída aos data frames para que possamos aproveitar melhor dessa estrutura retangular dentro do R. Na prática, essas duas dimensões representam nada mais que as linhas e as colunas da base. Essa é a maior diferença entre uma lista e um data frame. class(mtcars) ## [1] &quot;data.frame&quot; dim(mtcars) ## [1] 32 11 O resultado do código dim(mtcars) nos dá as seguintes informações: O data frame mtcars tem duas dimensões (como todo data frame). A primeira dimensão tem comprimento 32 e a segunda dimensão tem comprimento 11. Em outras palavras: a base mtcars tem 32 linhas e 11 colunas. Veja a seguir que listas não têm dimensão. mtcars_como_lista &lt;- as.list(mtcars) class(mtcars_como_lista) ## [1] &quot;list&quot; dim(mtcars_como_lista) ## NULL Ter duas dimensões significa que devemos usar dois índices para acessar os valores de um data frame (fazer subsetting). Para isso, ainda usamos o colchete, mas agora com dois argumentos: [linha, coluna]. mtcars[2, 3] ## [1] 160 O código acima está nos devolvendo o valor presente na segunda linha da terceira coluna da base mtcars. Também podemos pegar todos as linhas de uma coluna ou todas as colunas de uma linha deixando um dos argumentos vazio: # Todas as linhas da coluna 1 mtcars[,1] ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 ## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 ## [31] 15.0 21.4 # Todas as colunas da linha 1 mtcars[1,] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.62 16.46 0 1 4 4 Por fim, lembrando que dento de cada coluna temos um vetor, podemos usar os testes lógicos para filtrar as linhas do nosso data frame conforme alguma regra. mtcars$cyl == 4 ## [1] FALSE FALSE TRUE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE FALSE FALSE FALSE ## [25] FALSE TRUE TRUE TRUE FALSE FALSE FALSE TRUE mtcars[mtcars$cyl == 4, ] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 O código mtcars$cyl == 4 nos diz em quais linhas estão os carros com 4 cilindros. Quando usamos o vetor de TRUE e FALSE resultante dentro do subsetting das linhas em mtcars[mtcars$cyl == 4, ], o R nos devolve todos as colunas dos carros com 4 cilindros. A regra é simples: linha com TRUE é retornada, linha com FALSE não. Encerramos aqui a nossa primeira conversa sobre data frames para falar de outra estrutura muito importante dentro do R: as funções. Exercícios 1. Quais códigos abaixo retornam um vetor com a coluna “mpg”do data frame “mtcars”? mtcars$mpg mtcars[ , 3] mtcars(\"mpg\") mtcars[ , \"mpg\"] mtcars.mpg mtcars[ , 1] mtcars[1, 1] mpg$mtcars Também existem bases não retangulares, como dados de imagens por exemplos, mas não trataremos dessas estruturas neste livro.↩︎ Mesmo quando uma variável não existe para uma unidade amostral, representamos esse valor como um missing↩︎ "],
["3-11-funcoes.html", "3.11 Funções", " 3.11 Funções Enquanto objetos são nomes que guardam valores, funções no R são nomes que guardam um código de R. A ideia é muito simples: sempre que você rodar uma função, o código que ela guarda será executado e um resultado nos será devolvido. Funções são tão comuns e intuitivas (provavelmente você já usou funções no Excel), que mesmo sem definir o que elas são, nós já utilizamos funções nas seções anteriores: a função c() foi utilizada para criar vetores; a função class() foi utilizada para descobrir a classe de um objeto; a família de funções is.na(), is.nan(), is.infinite() e is.null foram utilizadas para testar se um valor é NA, NaN, infinito ou NULL, respectivamente. Diferentemente dos objetos, as funções podem receber argumentos. Argumentos são os valores que colocamos dentro dos parênteses e que as funções precisam para funcionar (calcular algum resultado). Por exemplo, a função c() precisa saber quais são os valores que formarão o vetor que ela irá criar. c(1, 3, 5) ## [1] 1 3 5 Nesse caso, os valores 1, 3 e 5 são os argumentos da função c(). Os argumentos de uma função são sempre separados por vírgulas. Funções no R têm personalidade. Cada uma pode funcionar de um jeito diferente das demais, mesmo quando fazem tarefas parecidas. Por exemplo, vejamos a função sum(). sum(1, 3) ## [1] 4 Como você deve ter percebido, essa função retorna a soma de seus argumentos. Também podemos passar um vetor como argumento, e ela retornará a soma dos elementos do vetor. sum(c(1, 3)) ## [1] 4 Já a função mean(), que calcula a média de um conjunto de valores, exige que você passe valores na forma de um vetor: # Só vai considerar o primeiro número na média mean(1, 3) ## [1] 1 # Considera todos os valores dentro do vetor na média mean(c(1, 3)) ## [1] 2 Como cada coluna de um data frame é um vetor, podemos calcular a média de uma coluna fazendo: # Podemos passar esse vetor para a função mean() mean(mtcars$mpg) ## [1] 20.09062 Também podemos usar argumentos para modificar o comportamento de uma função. O que acontece se algum elemento do vetor for NA? mean(c(1, 3, NA)) ## [1] NA Como a função não sabe o valor do terceiro elemento do vetor, ela não sabe qual é a média desses 3 elementos e, então, devolve NA. Como é muito comum termos NA nas nossas bases de dados, é muito comum tentarmos calcular a média de uma coluna que tem NA e recebermos NA como resposta. Na grande maioria dos casos, queremos saber a média de uma coluna apesar dos NAs. Isto é, queremos retirar os NAs e então calcular a média com os valores que conhecemos. Para isso, podemos utilizar o argumento na.rm = TRUE da função mean(). mean(c(1, 3, NA), na.rm = TRUE) ## [1] 2 Esse argumento diz à função para remover os NAs antes de calcular a média. Assim, a média calculada é: (1 + 3)/2. Claro que cada função tem os seus próprios argumentos e nem toda função terá o argumento na.rm=. Para saber quais são e como usar os argumentos de uma função, basta acessar a sua documentação: help(mean) Os argumentos das funções também têm nomes, que podemos ou não usar na hora de usar uma função. Veja por exemplo a função seq(). seq(from = 4, to = 10, by = 2) ## [1] 4 6 8 10 Entre outros argumentos, ela possui os argumentos from=, to= e by=. O que ela faz é criar uma sequência (vetor) de by em by que começa em from e termina em to. No exemplo, criamos uma função de 2 em 2 que começa em 4 e termina em 10. Também poderíamos usar a mesma função sem colocar o nome dos argumentos: seq(4, 10, 2) ## [1] 4 6 8 10 Para utilizar a função sem escrever o nome dos argumentos, você precisa colocar os valores na ordem em que os argumentos aparecem. E se você olhar a documentação da função seq(), fazendo help(seq), verá que a ordem dos argumentos é justamente from=, to= e by=. Escrevendo o nome dos argumentos, não há problema em alterar a ordem dos argumentos: seq(by = 2, to = 10, from = 4) ## [1] 4 6 8 10 Mas se especificar os argumentos, a ordem importa. Veja que o resultado será diferente. seq(2, 10, 4) ## [1] 2 6 10 A seguir, apresentamos algumas funções nativas do R úteis para trabalhar com data frames : head() - Mostra as primeiras 6 linhas. tail() - Mostra as últimas 6 linhas. dim() - Número de linhas e de colunas. names() - Os nomes das colunas (variáveis). str() - Estrutura do data frame. Mostra, entre outras coisas, as classes de cada coluna. cbind() - Acopla duas tabelas lado a lado. rbind() - Empilha duas tabelas. Além de usar funções já prontas, você pode criar a sua própria função. A sintaxe é a seguinte: nome_da_funcao &lt;- function(argumento_1, argumento_2) { # Código que a função irá executar } Repare que function é um nome reservado no R, isto é, você não pode criar um objeto com esse nome. Um exemplo: vamos criar uma função que soma dois números. minha_soma &lt;- function(x, y) { soma &lt;- x + y soma # resultado retornado } Essa função tem os seguintes componentes: minha_soma: nome da função x e y: argumentos da função soma &lt;- x + y: operação que a função executa soma: valor retornado pela função Após rodarmos o código de criar a função, podemos utilizá-la como qualquer outra função do R. minha_soma(2, 2) ## [1] 4 O objeto soma só existe dentro da função, isto é, além de ele não ser colocado no seu environment, ele só existirá na memória (RAM) enquanto o R estiver executando a função. Depois disso, ele será apagado. O mesmo vale para os argumentos x e y. O valor retornado pela função representa o resultado que receberemos ao utilizá-la. Por padrão, a função retornará sempre a última linha de código que existir dentro dela. No nosso exemplo, a função retorna o valor contido no objeto soma, pois é isso que fazemos na última linha de código da função. Repare que se atribuirmos o resultado a um objeto, ele não será mostrado no console: resultado &lt;- minha_soma(3, 3) # Para ver o resultado, rodamos o objeto `resultado` resultado ## [1] 6 Agora, o que acontece se a última linha da função não devolver um objeto? Veja: minha_nova_soma &lt;- function(x, y) { soma &lt;- x + y } A função minha_nova_soma() apenas cria o objeto soma, sem retorná-lo como na função minha_soma(). Se utilizarmos essa nova função, nenhum valor é devolvido no console: minha_nova_soma(1, 1) No entanto, a última linha da função agora é a atribuição soma &lt;- x + y e esse será o “resultado retornado”. Assim, podemos visualizar o resultado da função fazendo: resultado &lt;- minha_nova_soma(1, 1) resultado ## [1] 2 É como se, por trás das cortinas, o R estivesse fazendo resultado &lt;- soma &lt;- x + y, mas apenas o objeto resultado continua existindo, já que os objetos soma, xe y são descartados após a função ser executada. Claro que, na prática, é sempre bom criarmos funções que retornem na tela os seus resultados, para evitar esse passo a mais se quisermos apenas ver o resultado no console. Assim, a função minha_soma() costuma ser preferível com relação à função minha_nova_soma(). Exercícios 1. Qual dos códigos abaixo devolverá um erro se for avaliado? 3 * 5 + 10 function &lt;- 10 mean(1, 10) (soma &lt;- sum(1, 1)) 2. Crie uma função que receba dois valores (numéricos) e devolva o maior deles. 3. Use a função runif() para criar uma função que retorne um número aleatório inteiro entre 0 e 10 (0 e 10 inclusive). Caso você não conheça a função runif(), rode help(runif) para ler a sua documentação. 4. Rode help(sample) para descobrir o que a função sample() faz. Em seguida, use-a para escrever uma função que devolva uma linha aleatória de um data frame. "],
["3-12-controle-de-fluxo.html", "3.12 Controle de Fluxo", " 3.12 Controle de Fluxo Como toda boa linguagem de programação, o R possui estruturas de if, else, for e while. Esses controles de fluxo são muito importantes na hora de programar, pois nos permitem manipular de modo eficiente as ações do computador. A seguir, explicaremos para que servem e como utilizar cada uma dessas estruturas. 3.12.1 Condicionamento: if e else As estruturas if e else servem para executarmos um código apenas se uma condição (teste lógico) for satisfeita. No código abaixo, a função Sys.time(), que retorna a data/hora no momento da execução, só será avlaiada se o objeto x for igual a 1. # Não vai executar a função Sys.time() x &lt;- 2 if (x == 1) { Sys.time() } # Vai executar a função Sys.time() x &lt;- 1 if (x == 1) { Sys.time() } ## [1] &quot;2020-05-21 23:43:30 -03&quot; O R só vai executar o que está na expressão dentro das chaves {} se a expressão que estiver dentro dos parênteses () retornar TRUE. Veja outro exemplo: # Vai fazer a soma x &lt;- c(1, 3, 10, 15) if (class(x) == &quot;numeric&quot;) { sum(x) } ## [1] 29 # Não vai fazer a soma x &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) if (class(x) == &quot;numeric&quot;) { sum(x) } Nesse exemplo, a soma só é executada se a classe do objeto x for numérica, isto é, se x for um vetor de números. Essa verificação poderia ser colocada dentro de uma função para evitarmos que ela retorne um erro. minha_soma &lt;- function(x, y) { if (class(x) == &quot;numeric&quot; &amp; class(y) == &quot;numeric&quot;) { x + y } } # Retorna a soma minha_soma(1, 2) ## [1] 3 # Não retorna nada minha_soma(&quot;a&quot;, &quot;b&quot;) Nesses casos, é muito comum o uso das funções return() e stop() para, respectivamente, retornar um resultado antecipadamente ou para a execução da função e devolver ao usuário uma mensagem de erro personalizada. Um exemplo usando return(). # Devolvendo um resultado antecipadamente minha_soma_NA &lt;- function(x, y) { if (class(x) == &quot;numeric&quot; &amp; class(y) == &quot;numeric&quot;) { soma &lt;- x + y return(soma) } NA } # Retorna a soma minha_soma_NA(1, 2) ## [1] 3 # Retorna NA minha_soma_NA(&quot;a&quot;, &quot;b&quot;) ## [1] NA # Retorna NA minha_soma_NA(1, &quot;b&quot;) ## [1] NA Na função minha_soma_NA(), a soma só é calculada e retornada se x e y forem numéricos. Caso pelo menos um dos dois não seja, o código dentro do if não é executado e o valor retornado é o NA. Agora, usando stop(). # Agora, devolvendo um erro minha_soma_erro &lt;- function(x, y) { if (class(x) != &quot;numeric&quot; | class(y) != &quot;numeric&quot;) { stop(&quot;A classe dos objetos x e y deve ser numérica.&quot;) } x + y } # Retorna a soma minha_soma_erro(1, 2) ## [1] 3 # Retorna erro minha_soma_erro(&quot;a&quot;, &quot;b&quot;) ## Error in minha_soma_erro(&quot;a&quot;, &quot;b&quot;): A classe dos objetos x e y deve ser numérica. # Retorna erro minha_soma_erro(1, &quot;b&quot;) ## Error in minha_soma_erro(1, &quot;b&quot;): A classe dos objetos x e y deve ser numérica. Na função minha_soma_erro(), testamos no if se a classe de x ou a classe de y é diferente de numeric, isto é, se pelo menos um dos dois não é um número. Se esse teste retornar TRUE, a função para a sua execução e devolve para o usuário a seguinte mensagem de erro: “A classe dos objetos x e y deve ser numérica.”. Se o teste retorna FALSE, a soma é realizada e seu resultado nos é retornado. O else funciona como uma extensão do if, dando uma alternativa caso o teste executado seja falso. # Vai fazer a soma x &lt;- c(1, 3, 10, 15) if (class(x) == &quot;numeric&quot;) { sum(x) } else { NA } ## [1] 29 # Vai retornar NA x &lt;- c(1, 3, 10, &quot;15&quot;) if (class(x) == &quot;numeric&quot;) { sum(x) } else { NA } ## [1] NA Também podemos usar o else para encadear vários ifs. Teste o código abaixo com valores positivos e negativos para x. x &lt;- 0 if(x &lt; 0) { &quot;negativo&quot; } else if(x == 0) { &quot;neutro&quot; } else if(x &gt; 0) { &quot;positivo&quot; } ## [1] &quot;neutro&quot; Repare que o if no último else poderia ser omitido. x &lt;- 0 if(x &lt; 0) { &quot;negativo&quot; } else if(x == 0) { &quot;neutro&quot; } else { &quot;positivo&quot; } ## [1] &quot;neutro&quot; 3.12.2 Iteradores: for e while O for pode ser utilizado para fazer os famosos loopings de programação, isto é, repetir uma mesma tarefa para um conjunto de valores diferentes. Cada repetição é chamada de iteração e o objeto que muda de valor em cada interação é chamado de iterador. numero_de_colunas &lt;- ncol(mtcars) for (coluna in 1:numero_de_colunas) { media &lt;- mean(mtcars[,coluna]) print(media) } ## [1] 20.09062 ## [1] 6.1875 ## [1] 230.7219 ## [1] 146.6875 ## [1] 3.596563 ## [1] 3.21725 ## [1] 17.84875 ## [1] 0.4375 ## [1] 0.40625 ## [1] 3.6875 ## [1] 2.8125 O código acima vai calcular a média de cada coluna do data frame mtcars. Alguns pontos importantes: No exemplo, temos 11 iterações e o objeto coluna é o iterador. Como numero_de_colunas é igual a 11, a expressão 1:numero_de_colunas cria uma sequência de números de 1 a 11. A expressão coluna in 1:numero_de_colunas indica que o valor de coluna será 1 na primeira iteração, 2 na segunda iteração, 3 na terceira e assim por diante. O código dentro do for não é retornado para o usuário ao fim de cada iteração. Por isso, para ver os resultados no Console, usamos a função print(). Também podemos salvar as médias em um vetor. numero_de_colunas &lt;- ncol(mtcars) # Antes, criamos um vetor vazio. medias &lt;- c() for (coluna in 1:numero_de_colunas) { medias[coluna] &lt;- mean(mtcars[,coluna]) } medias ## [1] 20.090625 6.187500 230.721875 146.687500 3.596563 3.217250 ## [7] 17.848750 0.437500 0.406250 3.687500 2.812500 Assim como o for, o while também é um iterador. O código a seguir irá imprimir na tela o valor de i enquanto este objeto for menor que 3. No momento em que a condição dentro das chaves {} não for mais respeitada, o processo será interrompido. i &lt;- 1 while (i &lt; 3){ print(i) i &lt;- i + 1 } ## [1] 1 ## [1] 2 É importante que o valor de i seja atualizado em cada interação, caso contrário a função entrará em um loop infinito. Por isso fazemos i &lt;- i + 1 após o print. Exercícios 1. Por que o código abaixo retorna erro? Arrume o código para retornar o valor TRUE. x &lt;- 4 if(x = 4) { TRUE } 2. Usando if e else, escreva um código que retorne a string \"número\" caso o valor seja da classe numeric ou integer; a string \"palavra\" caso o valor seja da classe character; e NA caso contrário. 3. Usando apenas for e a função length(), construa uma função que calcule a média de um vetor número qualquer. Construa uma condição para a função retornar NULL caso o vetor não seja numérico. "],
["3-13-outros-tópicos.html", "3.13 Outros tópicos", " 3.13 Outros tópicos Nesta seção, apresentamos alguns tópicos extras. Alguns deles serão retomanos em capítulos posteriores. 3.13.1 Matrizes As matrizes no R podem ser tratadas como vetores com duas dimensões. Por serem vetores, elas só podem conter elementos de uma mesma classe. Por possuírem duas dimensões, as operações de subsetting devem ser realizadas utilizando a sintaxe matriz[linha, coluna]. Para criar uma matriz, utilizamos a função matrix(). Precisamos definir quais elementos formarão a matriz e qual será o número de linhas e colunas. # Uma matriz de 2 linhas e 3 colunas m &lt;- matrix(1:9, nrow = 3, ncol = 3) m ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 dim(m) ## [1] 3 3 Repare que os números de 1 a 9 foram dispostos na matriz coluna por coluna (column-wise), ou seja, preenchendo de cima para baixo e depois da esquerda para a direita. Esse comportamento pode ser alterado se utilizarmos o argumento byrow=. matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 Subsetting de matrizes é muito parecido com o de data frames. # Seleciona a terceira linha m[3, ] ## [1] 3 6 9 # Seleciona a segunda coluna m[ , 2] ## [1] 4 5 6 # Seleciona o primeiro elemento da segunda coluna m[1, 2] ## [1] 4 A seguir, apresentamos algumas operações úteis para trabalhar com matrizes. # Matriz transposta t(m) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 # Matriz identidade 3 por 3 n &lt;- diag(3) n ## [,1] [,2] [,3] ## [1,] 1 0 0 ## [2,] 0 1 0 ## [3,] 0 0 1 # Multiplicação por escalar n * 2 ## [,1] [,2] [,3] ## [1,] 2 0 0 ## [2,] 0 2 0 ## [3,] 0 0 2 # Multiplicação matricial m %*% n ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 # Matriz inversa de m n2 &lt;- n * 2 solve(n2) ## [,1] [,2] [,3] ## [1,] 0.5 0.0 0.0 ## [2,] 0.0 0.5 0.0 ## [3,] 0.0 0.0 0.5 3.13.2 Fatores Fatores são uma classe de objetos no R criada para representar as variáveis categóricas numericamente. Essa classe possui um atributo especial: os levels. Levels são nada mais do que as categorias possíveis de uma variável categórica. Como exemplo, imagine que o objeto sexo guarde uma coluna que indica o sexo de uma pessoa: F para feminino e M para masculino. Normalmente, essa coluna seria importada para o R como texto. Podemos transformá-la em fator utilizando a função as.factor(). # Variável sexo como texto sexo &lt;- c(&quot;F&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;, &quot;F&quot;, &quot;F&quot;, &quot;M&quot;) sexo ## [1] &quot;F&quot; &quot;M&quot; &quot;M&quot; &quot;M&quot; &quot;F&quot; &quot;F&quot; &quot;M&quot; # Variável sexo, como fator as.factor(sexo) ## [1] F M M M F F M ## Levels: F M Repare que a saída do objeto sexo quando o transformamos em fator tem uma informação a mais. Na última linha, visualizamos os levels desse fator, isto é, um conjunto das categorias possíveis do fator sexo (no caso, F e M). Por padrão, os levels são ordenados por ordem alfabética. Veremos mais adiante que isso pode fazer diferença na construção de gráficos e na aplicação de modelos. A diferença entre fatores e texto dentro do R é como eles são representados internamente. Enquanto objetos da classe character realmente são representados como texto, fatores são representados como números inteiros. # Em geral, não é possível transforma textos em números as.numeric(sexo) ## Warning: NAs introduced by coercion ## [1] NA NA NA NA NA NA NA # Mas podemos transforrma fatores em inteiros fator &lt;- as.factor(sexo) as.numeric(fator) ## [1] 1 2 2 2 1 1 2 Internamente, cada level de um fator é representado como um inteiro. No exemplo anterior, o level F está sendo representado como 1 e o level M como 2. Se um fator tiver 10 levels, teremos os inteiros de 1 a 10 representando esse fator. # letters é um objeto nativo do R letras &lt;- letters[1:10] fator &lt;- as.factor(letras) fator ## [1] a b c d e f g h i j ## Levels: a b c d e f g h i j as.numeric(fator) ## [1] 1 2 3 4 5 6 7 8 9 10 O texto que vemos quando avaliamos um fator (F e M em vez de 1 e 2, por exemplo) é apenas uma “etiqueta” que o R coloca em cima dos inteiros. As diferentes etiquetas de um fator são justamente os levels. Como fatores são sempre representados interrnamente por inteiros sequencias começando do 1 (1, 2, 3, …) e esses inteiros são sempre atribuídos conforme a ordem alfabética dos levels, um erro muito comum é tentar transformar levels numéricos em números: # Texto vetor &lt;- c(&quot;10&quot;, &quot;55&quot;, &quot;55&quot;, &quot;12&quot;, &quot;10&quot;, &quot;-5&quot;, &quot;-90&quot;) vetor ## [1] &quot;10&quot; &quot;55&quot; &quot;55&quot; &quot;12&quot; &quot;10&quot; &quot;-5&quot; &quot;-90&quot; # Fator fator &lt;- as.factor(vetor) fator ## [1] 10 55 55 12 10 -5 -90 ## Levels: -5 -90 10 12 55 # Número as.numeric(fator) ## [1] 3 5 5 4 3 1 2 Quando transformamos o objeto vetor em um fator, o R não enxerga os “números” dentro dele. Para o R, é tudo texto. Então, como nos outros exemplos, cada “número” será representado por um inteiro, atribuído pela ordem alfabética. Uma forma de evitar esse problema é transformar o fator em texto antes de transformá-lo em número. # Voltando para texto texto &lt;- as.character(fator) texto ## [1] &quot;10&quot; &quot;55&quot; &quot;55&quot; &quot;12&quot; &quot;10&quot; &quot;-5&quot; &quot;-90&quot; # Agora sim os números originais as.numeric(texto) ## [1] 10 55 55 12 10 -5 -90 3.13.3 Gráficos (R base) O R já vem com funções básicas que fazem gráficos estatísticos de todas as naturezas. Vantagens: são rápidas e simples. Desvantagens: os gráficos são simplórios e geralmente é difícil gerar gráficos mais elaborados. Nesta seção, mostraremos como construir alguns tipos de gráficos usando as funções base do R, mas o nosso foco em visualização de dados está nas funções do pacote ggplot2, apresentadas no Capítulo 8. 3.13.3.1 Gráfico de dispersão e linhas Para construir um gráfico de dispersão, utilizamos a função plot(). Seus principais parâmetros são: x, y: vetores para representarem os eixos x e y. type: tipo de gráfico. Pode ser pontos, linhas, escada, entre outros. Para mais detalhes sobre os argumentos, ver help(plot). N &lt;- 100 x &lt;- 1:N y &lt;- 5 + 2 * x + rnorm(N, sd = 30) plot(x, y) No código acima, a função rnorm() gera uma amostra aleatória da distribuição Normal com média 0 e desvio-padrão 30. O parâmetro type = \"l\" indica que queremos que os pontos sejam interligados por linhas. plot(x, y, type = &quot;l&quot;) 3.13.3.2 Histograma Para construir histogramas, utilizamos a função hist(). Os principais parâmetros são: x: o vetor numérico para o qual o histograma será construído. breaks: número (aproximado) de retângulos. hist(rnorm(1000)) hist(rnorm(1000), breaks = 6) 3.13.3.3 Boxplot Para construir boxplots, utilizamos a função boxplot(). Os principais parâmetros são: x: o vetor numérico para o qual o boxplot será construído. boxplot(mtcars$mpg, col = &quot;lightgray&quot;) Observe que o argumento col= muda a cor da caixa do boxplot. Para mapear duas variáveis ao gráfico, passamos um data frame para o argumento data= e utilizamos a seguinte sintaxe var_numerica ~ var_categorica. boxplot(mpg ~ cyl, data = mtcars, col = &quot;purple&quot;) 3.13.3.4 Gráfico de barras Para construir gráficos de barras, precisamos combinar as funções table() e barplot(). No gráfico abaixo, primeiro criamos uma tabela de frequências com a função table() e, em seguida, construímos o gráfico com a função barplot(). tabela &lt;- table(mtcars$cyl) tabela ## ## 4 6 8 ## 11 7 14 barplot(tabela) "],
["4-pacotes.html", "Capítulo 4 Pacotes", " Capítulo 4 Pacotes Um pacote é um conjunto de funções que têm como objetivo resolver um problema específico. São eles que deixam o R poderoso, capaz de enfrentar qualquer tarefa de análise de dados. Assim, fique bastante à vontade para instalar e atualizar muitos e muitos pacotes ao longo da sua experiência com o R. O legal é que qualquer pessoa pode fazer um novo pacote e disponibilizar para a comunidade, o que acelera bastante o desenvolvemento da ferramenta. Dificilmente você vai fazer uma análise apenas com as funções básicas do R e dificilmente não vai existir um pacote com as funções que você precisa. "],
["4-1-instalação-de-pacotes.html", "4.1 Instalação de pacotes", " 4.1 Instalação de pacotes Existem três principais maneiras de instalar pacotes. Em ordem de frequência, são: Via CRAN (Comprehensive R Archive Network): install.packages(\"nome-do-pacote\"). Via Github: devtools::install_github(\"nome-do-repo/nome-do-pacote\"). Via arquivo .zip/.tar.gz: install.packages(\"C:/caminho/nome-do-pacote.zip\", repos = NULL). Para conseguir instalar alguns pacotes no Linux, você pode precisar instalar dependências do sistema manualmente. Por exemplo, se você quer instalar o pacote devtools no R, será necessário ter as bibliotecas curl, openssl, httr e git2r. Essas dependências geralmente podem ser instaladas no terminal por meio do comando apt-get install nome-da-biblioteca. Caso você não consiga instalar um pacote devido a ausência de uma dependência, uma maneira de saber quais bibliotecas você precisa instalar é observar as mensagens que aparecem no console durante a tentativa da instalação do pacote. 4.1.1 Via CRAN Instale pacotes que não estão na sua biblioteca usando a função install.packages(\"nome_do_pacote\"). Por exemplo: install.packages(&quot;magrittr&quot;) E, de agora em diante, não precisa mais instalar. Basta carregar o pacote com library(magrittr). Escreva nome_do_pacote::nome_da_funcao() se quiser usar apenas uma função de um determinado pacote. O operador :: serve para isso. Essa forma também é útil quando se tem duas funções com o mesmo nome e precisamos garantir que o código vá usar a função do pacote correto. 4.1.2 Via Github Desenvolvedores costumam disponibilizar a última versão de seus pacotes no Github, e alguns deles sequer estão no CRAN. Mesmo assim ainda é possível utilizá-los instalando diretamente pelo github. O comando é igualmente simples: devtools::install_github(&quot;rstudio/shiny&quot;) Apenas será necessário o username e o nome do repositório (que geralmente tem o mesmo nome do pacote). No exemplo, o username foi “rstudio” e o repositório foi “shiny”. Se você não é familiar com o github, não se preocupe! Os pacotes disponibilizados na plataforma geralmente têm um README cuja primeira instrução é sobre a instalação. Se não tiver, provavelmente este pacote não te merece! =) 4.1.3 Via arquivo .zip ou .tar.gz Se você precisar instalar um pacote que está zipado no seu computador (ou em algum servidor), utilize o seguinte comando: install.packages(&quot;C:/caminho/para/o/arquivo/zipado/nome-do-pacote.zip&quot;, repos = NULL) É semelhante a instalar pacotes via CRAN, com a diferença que agora o nome do pacote é o caminho inteiro até o arquivo. O parâmetro repos = NULL informa que estamos instalando a partir da máquina local. A aba Packages do RStudio também ajuda a administrar os seus pacotes. "],
["4-2-tidyverse.html", "4.2 Tidyverse", " 4.2 Tidyverse Muitas pessoas tentam definir o que é ciência de dados no mercado e na academia. O problema é que esse termo pode ser descrito de várias formas distintas, seja pela formação específica da pessoa que define ou do interlocutor ao qual ela se comunica. Por isso, a definição de ciência de dados é, de certa forma, vazia. No entanto, é possível definir como se faz ciência de dados. Ou seja, independentemente da definição do termo, o que temos de fazer na prática em projetos reais é algo bastante conhecido. O “como faz” é definido através do Ciclo da Ciência de Dados, descrito na Figura 4.1. Primeiro, os dados brutos são coletados de fontes públicas, como arquivos Excel, portais de dados abertos ou bases de dados internos da companhia. Em seguida, os dados são arrumados, para mitigar problemas de padronização de nomes, obtenção das variáveis de interesse e exclusão de casos que estão fora do escopo de análise, produzindo o que se define como base de dados analítica. A base analítica é então transformada para produzir as tabelas e gráficos e, quando necessário, são utilizadas como insumo para o ajuste de modelos estatísticos. Finalmente, os resultados obtidos são comunicados através de uma série de ferramentas, como relatórios, dashboards interativos, indicadores ou Application Programming Interfaces (API) para automação. Figura 4.1: O Ciclo da Ciência de Dados. O {tidyverse} é um pacote guarda-chuva que consolida uma série de ferramentas que fazem parte o ciclo da ciência de dados. Fazem parte do {tidyverse} os pacotes {ggplot2}, {dplyr}, {tidyr}, {purrr}, {readr}, entre muitos outros, como é possível observar na Figura 4.2. Veremos as características principais desses pacotes nas próximas Seções. Figura 4.2: A implementação do Ciclo da Ciência de Dados, através do tidyverse. Pela definição estrita do tidyverse, na imagem não fazem parte do tidyverse os pacotes janitor, data.table e os pacotes descritos nas partes de modelagem, comunicação e automatização. No entanto, a maioria desses pacotes também seguem os princípios tidy e podem ser usados em conjunto com o tidyverse sem grandes dificuldades. O {tidyverse} traz consigo o manifesto tidy. Trata-se de um documento que formaliza uma série de princípios que norteiam o desenvolvimento do tidyverse. Como os pacotes do {tidyverse} compartilham os mesmos princípios, podem ser utilizados naturalmente em conjunto. Pode-se dizer que existe uma linguagem R antes e outra depois do {tidyverse}. A linguagem mudou muito, a comunidade abraçou uso desses princípios e criou centenas de novos pacotes que conversam uns com os outros dessa forma.9 Os princípios fundamentais do tidyverse são: Reutilizar estruturas de dados existentes. Organizar funções simples usando o pipe (Seção 6). Aderir à programação funcional (Seção 9). Projetado para ser usado por seres humanos. No texto do manifesto tidy cada um dos lemas é descrito de forma detalhada. No nosso blog, selecionamos os aspectos que achamos mais importante de cada um deles. Usar a filosofia tidy não é a única forma de fazer pacotes do R. Existem muitos pacotes excelentes que não utilizam essa filosofia. O próprio manifesto diz “O contrário de tidyverse não é o messyverse, e sim muitos outros universos de pacotes interconectados.”↩︎ "],
["5-importacao.html", "Capítulo 5 Importação", " Capítulo 5 Importação Nesta seção, vamos introduzir os principais pacotes para importar dados para o R. Mostraremos como importar dados de arquivos de texto, planilhas do excel e extensões de outros programas estatísticos (SAS e SPSS, por exemplo). Antes de começarmos, vale a pena destacarmos um ponto importante. As funções de importação do tidyverse importam dados em objetos da classe tibble, que difere da classe data.frame usual em dois pontos importantes: imprime os dados na tela (Console) de maneira muito mais organizada, resumida e legível; permite a utilização de list-columns. Se você não estiver familiarizado com o conceito de list-columns, não se preocupe. Trataremos melhor do assunto no Capítulo 9. "],
["5-1-readr.html", "5.1 O pacote readr", " 5.1 O pacote readr O pacote readrdo tidyverse é utilizado para importar arquivos de texto, como .txt ou .csv, para o R. Para carregá-lo, rode o código: library(readr) O readr transforma 7 tipos de arquivos de textos em tibbles usando as funções: read_csv(): para arquivos separados por vírgula. read_tsv(): para arquivos separados por tabulação. read_delim(): para arquivos separados por um delimitador genérico. O argumento delim= indica qual caracter separa cada coluna no arquivo de texto. read_table(): para arquivos de texto tabular com colunas separadas por espaço. read_fwf(): para arquivos compactos que devem ter a largura de cada coluna especificada. read_log(): para arquivos padrões de log. Vamos mostrar na próxima seção como importar as extensões mais comuns: .csv e .txt. 5.1.1 Importando arquivos de texto Como exemplo, utilizaremos uma base de filmes do IMDB, gravada em diversos formatos. O download dos arquivos pode ser realizado a partir deste repositório. Primeiro, vamos ler a base em formato .csv. imdb_csv &lt;- read_csv(file = &quot;imdb.csv&quot;) A mensagem retornada pela função indica qual classe foi atribuída para cada coluna. Repare que o argumento file= representa o caminho até o arquivo. Se o arquivo a ser lido não estiver no diretório de trabalho da sua sessão, você precisa especificar o caminho até o arquivo. # Se o arquivo estiver dentro de uma pasta chamada dados. imdb_csv &lt;- read_csv(file = &quot;dados/imdb.csv&quot;) A maioria das funções de leitura do readr possuem argumentos muito úteis para resolver problemas de importação: col_names=: indica se a primeira linha da base contém ou não o nome das colunas. Também pode ser utilizado para (re)nomear colunas. col_types=: caso alguma coluna seja importada com a classe errada (uma coluna de números foi importada como texto, por exemplo), você pode usar esse argumento para especificar a classe das colunas. locale=: útil para tratar problema de encoding. skip=: pula linhas no começo do arquivo antes de iniciar a importação. Útil para quando o arquivo a ser importado vem com metadados ou qualquer tipo de texto nas primeiras linhas, antes da base. na=: indica quais strings deverão ser considaras NA na hora da importação. Para ler bases com extensão .txt cujas colunas estão separadas por tabulação, podemos utilizar a função read_tsv(). imbd_tsv &lt;- read_tsv(file = &quot;imdb.tsv&quot;) Repare que a sintaxe é igual a da função read_csv(). Em geral, as funções de importação do tidyverse terão sintaxe muito parecidas e, caso a base que você precisa importar não apresente nenhum problema10, elas só precisarão do argumento file= para funcionar. A seguir, vamos falar das funções parse_(), muito úteis para tratar problemas na classe das variáveis na hora da importação. 5.1.2 Parseando valores 5.1.3 Locale 5.1.4 Escrevendo arquivos Para a maioria das funções read_, existe uma respectiva função write_. Essas funções servem para salvar bases em um formato específico de arquivo. Além do caminho/nome do arquivo a ser criado, você também precisa passar o objeto que será escrito. Para o arquivo criado funcionar corretamente, você precisa especificar a extensão correta no nome do arquivo. # Arquivo .csv write_csv(x = mtcars, path = &quot;data/mtcars.csv&quot;) # Base separada por tabulação write_delim(x = mtcars, delim = &quot;\\t&quot;, path = &quot;data/mtcars.txt&quot;) Também é possível salvar qualquer tipo de objeto do R em um tipo especial de arquivos, o .rds. A vantagem dessa extensão é guardar a estrutura dos dados salvos, como a classe das colunas de um data.frame. Além disso, é uma boa alternativa para lidar com grandes bancos de dados, já que você pode compactar os arquivos .rds, deixando-os bem menores que, por exemplo, um arquivo Excel. Para ler ou escrever arquivos .rds, utilize as funções read_rds() e write_rds(). imdb_rds &lt;- read_rds(path = &quot;imdb.rds&quot;) write_rds(mtcars, path = &quot;mtcars.rds&quot;) Exercícios Qual a diferença entre as funções read_csv() e read_csv2()? Leia o arquivo imdb.csv utilizando a função read_delim(). Escreva a base mtcars em um arquivo mtcars.csv que não contenha o nome das colunas. O que, infelizmente, acontece muito raramente.↩︎ "],
["5-2-readxl.html", "5.2 readxl", " 5.2 readxl O pacote readxl do tydiverse contém funções para importação com os formatos .xls e xlsx. readxl::read_xls(path = &quot;assets/data/imdb.xls&quot;) readxl::read_xlsx(path = &quot;assets/data/imdb.xlsx&quot;) A funçao read_excel() auto detecta a extensão do arquivo. read_excel(path = &quot;assets/data/imdb.xls&quot;) read_excel(path = &quot;assets/data/imdb.xlsx&quot;) O pacote disponibiliza 5 exemplos de arquivos com formato .xls e .xlsx. readxl_example() ## [1] &quot;clippy.xls&quot; &quot;clippy.xlsx&quot; &quot;datasets.xls&quot; &quot;datasets.xlsx&quot; ## [5] &quot;deaths.xls&quot; &quot;deaths.xlsx&quot; &quot;geometry.xls&quot; &quot;geometry.xlsx&quot; ## [9] &quot;type-me.xls&quot; &quot;type-me.xlsx&quot; Vamos acessar o arquivo datasets.xls. datasets &lt;- readxl_example(&quot;datasets.xls&quot;) read_xls(datasets) ## # A tibble: 150 x 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## # … with 140 more rows No Excel, um arquivo pode ter várias planilhas. Você pode ver quais planilhas fazem parte do arquivo: excel_sheets(datasets) ## [1] &quot;iris&quot; &quot;mtcars&quot; &quot;chickwts&quot; &quot;quakes&quot; Observe que quando usamos a função read_xls(datasets), o R transformou em tibble apenas a primeira planilha do arquivo. Caso essa não for a tabela que você deseja acessar, não se preocupe! Podemos resolver seu problema de forma simples. read_xls(datasets,sheet = &#39;chickwts&#39;) ## # A tibble: 71 x 2 ## weight feed ## &lt;dbl&gt; &lt;chr&gt; ## 1 179 horsebean ## 2 160 horsebean ## 3 136 horsebean ## 4 227 horsebean ## 5 217 horsebean ## 6 168 horsebean ## 7 108 horsebean ## 8 124 horsebean ## 9 143 horsebean ## 10 140 horsebean ## # … with 61 more rows Também é possivel fazer uma seleção das células da planilha que você deseja importar usando o argumento range = da função read_excel. Podemos indicar quais colunas ou linhas desejamos com as funções cell_cols() e cell_rows() respectivamente. Ou podemos difinir a dimensão dos dados a partir de uma célula com a função anchored(). Veja todas as fuções disponíveis neste manual. read_xls(datasets,sheet = &#39;chickwts&#39;,range = anchored(&#39;A3&#39;,dim = c(5,2)),col_names = F) ## New names: ## * `` -&gt; ...1 ## * `` -&gt; ...2 ## # A tibble: 5 x 2 ## ...1 ...2 ## &lt;dbl&gt; &lt;chr&gt; ## 1 160 horsebean ## 2 136 horsebean ## 3 227 horsebean ## 4 217 horsebean ## 5 168 horsebean "],
["5-3-haven.html", "5.3 haven", " 5.3 haven Para ler arquivos gerados por outros softwares, como SPSS, SAS e STATA, você pode usar as funções do pacote haven. Este pacote faz parte do tidyverse e é um wrapper da biblioteca ReadStat, escrita em C. library(haven) imdb_sas &lt;- read_sas(&quot;assets/data/imdb.sas7bdat&quot;) imdb_spss &lt;- read_spss(&quot;assets/data/imdb.sav&quot;) imdb_dta &lt;- read_dta(&quot;assets/data/imdb.dta&quot;) É possível salvar ou escrever bases em SAS e STATA com as funções write_sas e write_dta. write_dta(mtcars, &#39;assets/data/mtcars.dta&#39;) Quando importamos arquivos gerados pelo SAS SPSS ou STATA para o R, os rótulos de uma variável podem não ser importados de forma correta. O pacote haven tem uma soluçao para este problema. x &lt;- labelled(c(1,1,2,3,2,2,1,2), c(Ruim = 1, Bom = 2, Otimo = 3)) labelled() adiciona rótulos à valores de uma variável. Para verificar quais são estes rótulos, podemos usar a função print_labels(). print_labels(x) ## ## Labels: ## value label ## 1 Ruim ## 2 Bom ## 3 Otimo Existe uma função similar a labelled(), exclusiva para o SPSS, que além de rotular as variáveis, também defini quais símbolos representam valores faltantes, dado que em SPSS pode haver mais de um tipo de missing. x1 &lt;- labelled_spss(c(1,3,0,2,2,1,0,2,4), c(Ruim = 1,Bom = 2, Otimo = 3), na_values = c(0,4)) is.na(x1) ## [1] FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE TRUE Agora que já definimos os missings “especiais”, podemos transformá-los no missing padrão do R, representado pelo símbolo NA. x1 &lt;- zap_missing(x1) x1 ## &lt;Labelled double&gt; ## [1] 1 3 NA 2 2 1 NA 2 NA ## ## Labels: ## value label ## 1 Ruim ## 2 Bom ## 3 Otimo Existem outras funções zap_ interessantes no pacote. Após rotular os valores do vetor, podemos convertê-los, por exemplo, em fator. Para isso, usamos uma função do pacote haven. A função base as.factor() também poderia ser usada, mas quando a usamos, os rótulos não são considerados. x_base &lt;- base::as.factor(x) levels(x_base) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; x_factor &lt;- haven::as_factor(x) levels(x_factor) ## [1] &quot;Ruim&quot; &quot;Bom&quot; &quot;Otimo&quot; "],
["6-pipe.html", "Capítulo 6 Pipe ", " Capítulo 6 Pipe "],
["6-1-o-operador-pipe.html", "6.1 O operador pipe", " 6.1 O operador pipe O operador %&gt;% (pipe) foi uma das grandes revoluções recentes do R, tornando a leitura de códigos mais lógica, fácil e compreensível. Ele foi introduzido por Stefan Milton Bache no pacote magrittr e já existem diversos pacotes construidos para facilitar a sua utilizaçăo. Para começar a utilizar o pipe, instale e carregue o pacote magrittr. install.packages(&quot;magrittr&quot;) library(magrittr) A ideia do operador %&gt;% (pipe) é bem simples: usar o valor resultante da expressão do lado esquerdo como primeiro argumento da função do lado direito. # As duas linhas abaixo são equivalentes. f(x, y) x %&gt;% f(y) Nos casos mais simples, o pipe parece não trazer grandes vantagens. Agora, veja como fica um caso com mais etapas. # Vamos calcular a raiz quadrada da soma dos valores de 1 a 4. Primeiro, sem o pipe. x &lt;- c(1, 2, 3, 4) sqrt(sum(x)) ## [1] 3.162278 # Agora com o pipe. x %&gt;% sum() %&gt;% sqrt() ## [1] 3.162278 O caminho que o código x %&gt;% sum %&gt;% sqrt seguiu foi enviar o objeto x como argumento da função sum() e, em seguida, enviar a saida da expressão sum(x) como argumento da função sqrt(). Observe que escrevemos o código na mesma ordem das operações. A utilização de parênteses após o nome das funções não é necessário, mas recomendável. Se você ainda não está convencido com o poder do pipe, fica que vai ter bolo! No exemplo abaixo, vamos ilustrar um caso em que temos um grande número de funções aninhadas. Veja como a utilização do pipe transforma um código confuso e difícil de ser lido em algo simples e intuitivo. # Receita de bolo sem pipe. Tente entender o que é preciso fazer. esfrie(asse(coloque(bata(acrescente(recipiente(rep(&quot;farinha&quot;, 2), &quot;água&quot;, &quot;fermento&quot;, &quot;leite&quot;, &quot;óleo&quot;), &quot;farinha&quot;, até = &quot;macio&quot;), duração = &quot;3min&quot;), lugar = &quot;forma&quot;, tipo = &quot;grande&quot;, untada = TRUE), duração = &quot;50min&quot;), &quot;geladeira&quot;, &quot;20min&quot;) # Veja como o código acima pode ser reescrito utilizando-se o pipe. Agora realmente se parece com uma receita de bolo. recipiente(rep(&quot;farinha&quot;, 2), &quot;água&quot;, &quot;fermento&quot;, &quot;leite&quot;, &quot;óleo&quot;) %&gt;% acrescente(&quot;farinha&quot;, até = &quot;macio&quot;) %&gt;% bata(duração = &quot;3min&quot;) %&gt;% coloque(lugar = &quot;forma&quot;, tipo = &quot;grande&quot;, untada = TRUE) %&gt;% asse(duração = &quot;50min&quot;) %&gt;% esfrie(&quot;geladeira&quot;, &quot;20min&quot;) Às vezes, queremos que o resultado do lado esquerdo vá para outro argumento do lado direito que não o primeiro. Para isso, utilizamos um . como marcador. # Queremos que o dataset seja recebido pelo segundo argumento (data=) da função &quot;lm&quot;. airquality %&gt;% na.omit %&gt;% lm(Ozone ~ Wind + Temp + Solar.R, data = .) %&gt;% summary ## ## Call: ## lm(formula = Ozone ~ Wind + Temp + Solar.R, data = .) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.485 -14.219 -3.551 10.097 95.619 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -64.34208 23.05472 -2.791 0.00623 ** ## Wind -3.33359 0.65441 -5.094 1.52e-06 *** ## Temp 1.65209 0.25353 6.516 2.42e-09 *** ## Solar.R 0.05982 0.02319 2.580 0.01124 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 21.18 on 107 degrees of freedom ## Multiple R-squared: 0.6059, Adjusted R-squared: 0.5948 ## F-statistic: 54.83 on 3 and 107 DF, p-value: &lt; 2.2e-16 Também é possível definir funções na sua pipeline. c(1,2,3) %&gt;% (function(x){ sum(x) }) ## [1] 6 O pipe é a força da gravidade dentro do tidyverse. Veremos nas próximas seções como as funções de diferentes pacotes interagem perfeitamente graças a esse operador. "],
["6-2-outros-operadores.html", "6.2 Outros operadores", " 6.2 Outros operadores Existem outros operadores do mesmo pacote, que apesar de menos usados, também são úteis. São eles: Assignment operator %&lt;&gt;% Operador tee %T&gt;% Exposition operator %$% 6.2.1 Operador de atribuição ( Assignment operator ) Quando queremos sobrescrever um objeto, é comum utilizarmos o operador &lt;-. Por exemplo, se queremos somar 10 a cada valor do vetor \\(x\\), podemos fazer: x &lt;- c(1,2,3,4) x &lt;- x %&gt;% add(10) x ## [1] 11 12 13 14 Com o operador de atribuição, o código acima se reduz a x %&lt;&gt;% add(10) Este operador pode ser usado sempre que desejamos fazer algo da forma objeto &lt;- objeto %&gt;% função 6.2.2 Operador tee O operador tee retorna o valor do comando anterior a %T&gt;%, não o resultado do lado direito dele como o pipe faz. O seguinte exemplo vai imprimir na tela os valores de 1 a 10. Se usássemos o pipe, o código retornaria a soma dos dez números. 1:10 %T&gt;% sum() %&gt;% cat() ## 1 2 3 4 5 6 7 8 9 10 Neste caso, o operador não parece fazer sentido e apenas deixa o código mais complicado, mas se desejamos usar funções como cat() ou plot() que não retornam nada, o operador se torna muito útil. Vamos imprimir na tela os valores de 1 a 10 e depois soma-los. 1:10 %T&gt;% cat() %&gt;% sum() ## 1 2 3 4 5 6 7 8 9 10 ## [1] 55 6.2.3 Exposition operator Usamos o operador %$%para salvar o valor resultante da expressão do lado esquerdo, podendo usar como quiser do lado direito. Por exemplo, para obter o primeiro elemento de um vetor, podemos fazer: data.frame(z=1:10)%$% z[1] ## [1] 1 Para mais informações sobre o pipe, outros operadores relacionados e exemplos de utilização, visite a página Ceci n’est pas un pipe. "],
["6-3-exercícios-6.html", "6.3 Exercícios", " 6.3 Exercícios 1. Reescreva a expressão abaixo utilizando o %&gt;%. round(mean(sum(1:10)/3), digits = 1) Dica: utilize a função magrittr::divide_by(). Veja o help da função para mais informações. 2. Reescreva o código abaixo utilizando o %&gt;%. x &lt;- rnorm(100) x.pos &lt;- x[x&gt;0] media &lt;- mean(x.pos) saida &lt;- round(media, 1) 3. Sem rodar, diga qual a saída do código abaixo. Consulte o help das funções caso precise. 2 %&gt;% add(2) %&gt;% c(6, NA) %&gt;% mean(na.rm = T) %&gt;% equals(5) 4. Leia o capítulo sobre pipes do R for data science. É curto e vale muito a pena. 5. Pegue algum script que você já tenha programado em R e o reescreva utilizando o operador pipe. Se você não tiver nenhum, não se preocupe. Utilizaremos bastante o pipe daqui pra frente. "],
["6-4-respostas.html", "6.4 Respostas", " 6.4 Respostas Não há apenas uma maneira de resolver os exercícios. Você pode encontrar soluções diferentes das nossas, algumas vezes mais eficientes, outras vezes menos. Quando estiver fazendo suas análises, tente buscar o equilíbrio entre eficiência e praticidade. Economizar 1 hora com a execução do código pode não valer a pena se você demorou 2 horas a mais para programá-lo. 1. Reescreva a expressão abaixo utilizando o %&gt;%. round(mean(sum(1:10)/3), digits = 1) ## [1] 18.3 1:10 %&gt;% sum %&gt;% divide_by(3) %&gt;% round(digits = 1) ## [1] 18.3 2. Reescreva o código abaixo utilizando o %&gt;%. # Setamos a semente que gera números aleatórios para deixar o resultado reprodutível set.seed(137) x &lt;- rnorm(100) x.pos &lt;- x[x&gt;0] media &lt;- mean(x.pos) saida &lt;- round(media, 2) saida ## [1] 0.78 set.seed(137) rnorm(100) %&gt;% magrittr::extract(. &gt; 0) %&gt;% mean %&gt;% round(digits = 2) ## [1] 0.78 3. Sem rodar, diga qual a saída do código abaixo. Consulte o help das funções caso precise. 2 %&gt;% add(2) %&gt;% c(6, NA) %&gt;% mean(na.rm = T) %&gt;% equals(5) Primeiro, somamos 2 com 2, gerando o valor 4. Então colocamos esse valor em um vetor com os valores 6 e NA. Em seguida, tiramos a média desse vetor, desconsiderando o NA, obtendo o valor 5. Por fim, testemos se o valor é igual a 5, obtendo o valor TRUE. "],
["7-manipulacao.html", "Capítulo 7 Manipulação", " Capítulo 7 Manipulação “(…) The fact that data science exists as a field is a colossal failure of statistics. To me, what I do is what statistics is all about. It is gaining insight from data using modelling and visualization. Data munging and manipulation is hard and statistics has just said that’s not our domain.” - Hadley Wickham Esta seção trata do tema manipulação de dados. Trata-se de uma tarefa dolorosa e demorada, tomando muitas vezes a maior parte do tempo de uma análise estatística. Essa etapa é essencial em qualquer análise de dados e, apesar de negligenciada pela academia, é decisiva para o sucesso de estudos aplicados. Usualmente, o cientista de dados parte de uma base “crua” e a transforma até obter uma base de dados analítica, que, a menos de transformações simples, está preparada para passar por análises estatísticas. A figura abaixo mostra a fase de “disputa” com os dados (data wrangling) para deixá-los no formato analítico. Um conceito importante para obtenção de uma base analítica é o data tidying, ou arrumação de dados. Uma base é considerada tidy se Cada linha da base representa uma observação. Cada coluna da base representa uma variável. A base de dados analítica é estruturada de tal forma que pode ser colocada diretamente em ambientes de modelagem estatística ou de visualização. Nem sempre uma base de dados analítica está no formato tidy, mas usualmente são necessários poucos passos para migrar de uma para outra. A filosofia tidy é a base do tidyverse. Os principais pacotes encarregados da tarefa de estruturar os dados são o dplyr e o tidyr. Eles serão o tema desse tópico. Instale e carregue os pacotes utilizando: install.packages(&quot;dplyr&quot;) install.packages(&quot;tidyr&quot;) library(dplyr) library(tidyr) Mas antes de apresentar as principais funções do dplyr e do tidyr, precisamos falar sobre o conceito de tibbles. "],
["7-1-trabalhando-com-tibbles.html", "7.1 Trabalhando com tibbles", " 7.1 Trabalhando com tibbles Uma tibble nada mais é do que um data.frame, mas com um método de impressão mais adequado. As tibbles são parte do pacote tibble. Assim, para começar a usá-las, instale e carregue o pacote. install.packages(&quot;tibble&quot;) library(tibble) Mais informações sobre tibbles podem ser encontradas neste link. Nessa seção, vamos trabalhar com uma base de filmes do IMDB. Essa base pode ser baixada clicando aqui. imdb &lt;- readr::read_rds(&quot;assets/data/imdb.rds&quot;) Assim, utilizaremos o objeto imdb para acessar os dados. imdb ## # A tibble: 3,807 x 15 ## titulo ano diretor duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Avata… 2009 James … 178 Color Action… USA A partir de … 237000000 ## 2 Pirat… 2007 Gore V… 169 Color Action… USA A partir de … 300000000 ## 3 The D… 2012 Christ… 164 Color Action… USA A partir de … 250000000 ## 4 John … 2012 Andrew… 132 Color Action… USA A partir de … 263700000 ## 5 Spide… 2007 Sam Ra… 156 Color Action… USA A partir de … 258000000 ## 6 Tangl… 2010 Nathan… 100 Color Advent… USA Livre 260000000 ## 7 Aveng… 2015 Joss W… 141 Color Action… USA A partir de … 250000000 ## 8 Batma… 2016 Zack S… 183 Color Action… USA A partir de … 250000000 ## 9 Super… 2006 Bryan … 169 Color Action… USA A partir de … 209000000 ## 10 Pirat… 2006 Gore V… 151 Color Action… USA A partir de … 225000000 ## # … with 3,797 more rows, and 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; Veja que, por padrão, apenas as dez primeiras linhas da tibble são impressas na tela. Além disso, as colunas que não couberem na largura do console serão omitidas. Também são apresentadas a dimensão da tabela e as classes de cada coluna. "],
["7-2-dplyr.html", "7.2 O pacote dplyr", " 7.2 O pacote dplyr O dplyr é o pacote mais útil para realizar transformação de dados, aliando simplicidade e eficiência de uma forma elegante. Os scripts em R que fazem uso inteligente dos verbos dplyr e as facilidades do operador pipe tendem a ficar mais legíveis e organizados sem perder velocidade de execução. As principais funções do dplyr são: filter() - filtra linhas select() - seleciona colunas arrange() - ordena a base mutate() - cria/modifica colunas group_by() - agrupa a base summarise() - sumariza a base Todas essas funções seguem as mesmas características: O input é sempre uma tibble e o output é sempre um tibble. Colocamos o tibble no primeiro argumento e o que queremos fazer nos outros argumentos. A utilização é facilitada com o emprego do operador %&gt;%. O pacote faz uso extensivo de NSE (non standard evaluation). As principais vantagens de se usar o dplyr em detrimento das funções do R base são: Manipular dados se torna uma tarefa muito mais simples. O código fica mais intuitivo de ser escrito e mais simples de ser lido. O pacote dplyr utiliza C e C++ por trás da maioria das funções, o que geralmente torna o código mais eficiente. É possível trabalhar com diferentes fontes de dados, como bases relacionais (SQL) e data.table. Agora, vamos avaliar com mais detalhes as principais funções do pacote dplyr. 7.2.1 Filtrando linhas A função filter() filtra linhas. Ela é semelhante à função subset(), do R base. O código abaixo retorna apenas filmes com nota maior que nova. imdb %&gt;% filter(nota_imdb &gt; 9) ## # A tibble: 3 x 15 ## titulo ano diretor duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 The S… 1994 Frank … 142 Color Crime|… USA A partir de … 25000000 ## 2 The G… 1972 Franci… 175 Color Crime|… USA A partir de … 6000000 ## 3 Kickb… 2016 John S… 90 &lt;NA&gt; Action USA Outros 17000000 ## # … with 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; Para fazer várias condições, use os operadores lógicos &amp; e | ou separe filtros entre vírgulas. imdb %&gt;% filter(ano &gt; 2010 &amp; nota_imdb &gt; 8.5) ## # A tibble: 5 x 15 ## titulo ano diretor duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Inter… 2014 Christ… 169 Color Advent… USA A partir de … 165000000 ## 2 Runni… 2015 Mike M… 88 Color Family USA Outros 5000000 ## 3 A Beg… 2016 Mitche… 87 Color Comedy… USA Outros NA ## 4 Kickb… 2016 John S… 90 &lt;NA&gt; Action USA Outros 17000000 ## 5 Butte… 2014 Cary B… 78 Color Docume… USA Outros 180000 ## # … with 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; imdb %&gt;% filter(receita &gt; orcamento | nota_imdb &gt; 9) ## # A tibble: 1,762 x 15 ## titulo ano diretor duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Avata… 2009 James … 178 Color Action… USA A partir de … 237000000 ## 2 Pirat… 2007 Gore V… 169 Color Action… USA A partir de … 300000000 ## 3 The D… 2012 Christ… 164 Color Action… USA A partir de … 250000000 ## 4 Spide… 2007 Sam Ra… 156 Color Action… USA A partir de … 258000000 ## 5 Aveng… 2015 Joss W… 141 Color Action… USA A partir de … 250000000 ## 6 Batma… 2016 Zack S… 183 Color Action… USA A partir de … 250000000 ## 7 Pirat… 2006 Gore V… 151 Color Action… USA A partir de … 225000000 ## 8 Man o… 2013 Zack S… 143 Color Action… USA A partir de … 225000000 ## 9 The A… 2012 Joss W… 173 Color Action… USA A partir de … 220000000 ## 10 The A… 2012 Marc W… 153 Color Action… USA A partir de … 230000000 ## # … with 1,752 more rows, and 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; O operador %in% é muito útil na hora de criar filtros. O resultado das operações com %in% é um vetor lógico o tamanho do vetor do elemento da esquerda, identificando quais elementos da esquerda batem com algum elemento da direita. letters %in% c(&quot;a&quot;, &quot;e&quot;, &quot;z&quot;) ## [1] TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE TRUE imdb %&gt;% filter(diretor %in% c(&quot;Steven Spielberg&quot;, &quot;Quentin Tarantino&quot;)) ## # A tibble: 32 x 15 ## titulo ano diretor duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 India… 2008 Steven… 122 Color Action… USA A partir de … 185000000 ## 2 War o… 2005 Steven… 116 Color Advent… USA A partir de … 132000000 ## 3 The A… 2011 Steven… 107 Color Action… USA Livre 135000000 ## 4 Minor… 2002 Steven… 145 Color Action… USA A partir de … 102000000 ## 5 Djang… 2012 Quenti… 165 Color Drama|… USA A partir de … 100000000 ## 6 A.I. … 2001 Steven… 146 Color Advent… USA A partir de … 100000000 ## 7 The L… 1997 Steven… 129 Color Action… USA A partir de … 73000000 ## 8 The T… 2004 Steven… 128 Color Comedy… USA A partir de … 60000000 ## 9 Inglo… 2009 Quenti… 153 Color Advent… USA A partir de … 75000000 ## 10 Hook  1991 Steven… 142 Color Advent… USA Livre 70000000 ## # … with 22 more rows, and 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; Também podemos usar funções que retornam valores lógicos, como a str_detect(), do pacote stringr. Esse pacote possui funções para a manipulação de strings, e será abordado com mais detalhes quando falarmos sobre stringr. library(stringr) imdb %&gt;% filter(str_detect(generos, &quot;Action&quot;)) ## # A tibble: 861 x 15 ## titulo ano diretor duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Avata… 2009 James … 178 Color Action… USA A partir de … 237000000 ## 2 Pirat… 2007 Gore V… 169 Color Action… USA A partir de … 300000000 ## 3 The D… 2012 Christ… 164 Color Action… USA A partir de … 250000000 ## 4 John … 2012 Andrew… 132 Color Action… USA A partir de … 263700000 ## 5 Spide… 2007 Sam Ra… 156 Color Action… USA A partir de … 258000000 ## 6 Aveng… 2015 Joss W… 141 Color Action… USA A partir de … 250000000 ## 7 Batma… 2016 Zack S… 183 Color Action… USA A partir de … 250000000 ## 8 Super… 2006 Bryan … 169 Color Action… USA A partir de … 209000000 ## 9 Pirat… 2006 Gore V… 151 Color Action… USA A partir de … 225000000 ## 10 The L… 2013 Gore V… 150 Color Action… USA A partir de … 215000000 ## # … with 851 more rows, and 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; 7.2.2 Selecionando colunas A função select() seleciona colunas (variáveis). É possível utilizar nomes, índices, intervalos de variáveis ou utilizar as funções starts_with(x), contains(x), matches(x), one_of(x) para selecionar as variáveis. imdb %&gt;% select(titulo, ano, orcamento) ## # A tibble: 3,807 x 3 ## titulo ano orcamento ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Avatar  2009 237000000 ## 2 Pirates of the Caribbean: At World&#39;s End  2007 300000000 ## 3 The Dark Knight Rises  2012 250000000 ## 4 John Carter  2012 263700000 ## 5 Spider-Man 3  2007 258000000 ## 6 Tangled  2010 260000000 ## 7 Avengers: Age of Ultron  2015 250000000 ## 8 Batman v Superman: Dawn of Justice  2016 250000000 ## 9 Superman Returns  2006 209000000 ## 10 Pirates of the Caribbean: Dead Man&#39;s Chest  2006 225000000 ## # … with 3,797 more rows imdb %&gt;% select(starts_with(&quot;ator&quot;)) ## # A tibble: 3,807 x 3 ## ator_1 ator_2 ator_3 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 CCH Pounder Joel David Moore Wes Studi ## 2 Johnny Depp Orlando Bloom Jack Davenport ## 3 Tom Hardy Christian Bale Joseph Gordon-Levitt ## 4 Daryl Sabara Samantha Morton Polly Walker ## 5 J.K. Simmons James Franco Kirsten Dunst ## 6 Brad Garrett Donna Murphy M.C. Gainey ## 7 Chris Hemsworth Robert Downey Jr. Scarlett Johansson ## 8 Henry Cavill Lauren Cohan Alan D. Purwin ## 9 Kevin Spacey Marlon Brando Frank Langella ## 10 Johnny Depp Orlando Bloom Jack Davenport ## # … with 3,797 more rows O operador : pode ser usado para selecionar intervalos de colunas. imdb %&gt;% select(titulo, ator_1:ator_3) ## # A tibble: 3,807 x 4 ## titulo ator_1 ator_2 ator_3 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Avatar  CCH Pounder Joel David M… Wes Studi ## 2 Pirates of the Caribbean: At Wor… Johnny Depp Orlando Bloom Jack Davenport ## 3 The Dark Knight Rises  Tom Hardy Christian Ba… Joseph Gordon-… ## 4 John Carter  Daryl Sabara Samantha Mor… Polly Walker ## 5 Spider-Man 3  J.K. Simmons James Franco Kirsten Dunst ## 6 Tangled  Brad Garrett Donna Murphy M.C. Gainey ## 7 Avengers: Age of Ultron  Chris Hemswo… Robert Downe… Scarlett Johan… ## 8 Batman v Superman: Dawn of Justi… Henry Cavill Lauren Cohan Alan D. Purwin ## 9 Superman Returns  Kevin Spacey Marlon Brando Frank Langella ## 10 Pirates of the Caribbean: Dead M… Johnny Depp Orlando Bloom Jack Davenport ## # … with 3,797 more rows Para retirar colunas da base, base acrescentar um - antes da seleção. imdb %&gt;% select(-ano, - diretor) ## # A tibble: 3,807 x 13 ## titulo duracao cor generos pais classificacao orcamento receita nota_imdb ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Avata… 178 Color Action… USA A partir de … 237000000 7.61e8 7.9 ## 2 Pirat… 169 Color Action… USA A partir de … 300000000 3.09e8 7.1 ## 3 The D… 164 Color Action… USA A partir de … 250000000 4.48e8 8.5 ## 4 John … 132 Color Action… USA A partir de … 263700000 7.31e7 6.6 ## 5 Spide… 156 Color Action… USA A partir de … 258000000 3.37e8 6.2 ## 6 Tangl… 100 Color Advent… USA Livre 260000000 2.01e8 7.8 ## 7 Aveng… 141 Color Action… USA A partir de … 250000000 4.59e8 7.5 ## 8 Batma… 183 Color Action… USA A partir de … 250000000 3.30e8 6.9 ## 9 Super… 169 Color Action… USA A partir de … 209000000 2.00e8 6.1 ## 10 Pirat… 151 Color Action… USA A partir de … 225000000 4.23e8 7.3 ## # … with 3,797 more rows, and 4 more variables: likes_facebook &lt;int&gt;, ## # ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; imdb %&gt;% select(-starts_with(&quot;ator&quot;)) ## # A tibble: 3,807 x 12 ## titulo ano diretor duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Avata… 2009 James … 178 Color Action… USA A partir de … 237000000 ## 2 Pirat… 2007 Gore V… 169 Color Action… USA A partir de … 300000000 ## 3 The D… 2012 Christ… 164 Color Action… USA A partir de … 250000000 ## 4 John … 2012 Andrew… 132 Color Action… USA A partir de … 263700000 ## 5 Spide… 2007 Sam Ra… 156 Color Action… USA A partir de … 258000000 ## 6 Tangl… 2010 Nathan… 100 Color Advent… USA Livre 260000000 ## 7 Aveng… 2015 Joss W… 141 Color Action… USA A partir de … 250000000 ## 8 Batma… 2016 Zack S… 183 Color Action… USA A partir de … 250000000 ## 9 Super… 2006 Bryan … 169 Color Action… USA A partir de … 209000000 ## 10 Pirat… 2006 Gore V… 151 Color Action… USA A partir de … 225000000 ## # … with 3,797 more rows, and 3 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt; 7.2.3 Ordenando a base A função arrange() ordena a base segundo uma ou mais colunas. O argumento desc= pode ser utilizado para gerar uma ordem decrescente. imdb %&gt;% arrange(orcamento) %&gt;% select(orcamento, everything()) ## # A tibble: 3,807 x 15 ## orcamento titulo ano diretor duracao cor generos pais classificacao ## &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 218 Tarna… 2003 Jonath… 88 Color Biogra… USA Outros ## 2 1100 My Da… 2004 Jon Gu… 90 Color Docume… USA Livre ## 3 1400 A Pla… 2013 Benjam… 76 Color Drama|… USA Outros ## 4 3250 The M… 2005 Anthon… 84 Color Crime|… USA A partir de … ## 5 7000 Prime… 2004 Shane … 77 Color Drama|… USA A partir de … ## 6 7000 El Ma… 1992 Robert… 81 Color Action… USA A partir de … ## 7 9000 Newly… 2011 Edward… 95 Color Comedy… USA Outros ## 8 10000 Pink … 1972 John W… 108 Color Comedy… USA A partir de … ## 9 13000 The T… 2007 Jane C… 7 Color Romanc… USA Outros ## 10 15000 Paran… 2007 Oren P… 84 Color Horror USA A partir de … ## # … with 3,797 more rows, and 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; imdb %&gt;% arrange(desc(orcamento)) %&gt;% select(orcamento, everything()) ## # A tibble: 3,807 x 15 ## orcamento titulo ano diretor duracao cor generos pais classificacao ## &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 300000000 Pirat… 2007 Gore V… 169 Color Action… USA A partir de … ## 2 263700000 John … 2012 Andrew… 132 Color Action… USA A partir de … ## 3 260000000 Tangl… 2010 Nathan… 100 Color Advent… USA Livre ## 4 258000000 Spide… 2007 Sam Ra… 156 Color Action… USA A partir de … ## 5 258000000 Spide… 2007 Sam Ra… 156 Color Action… USA A partir de … ## 6 250000000 The D… 2012 Christ… 164 Color Action… USA A partir de … ## 7 250000000 Aveng… 2015 Joss W… 141 Color Action… USA A partir de … ## 8 250000000 Batma… 2016 Zack S… 183 Color Action… USA A partir de … ## 9 250000000 Pirat… 2011 Rob Ma… 136 Color Action… USA A partir de … ## 10 250000000 Capta… 2016 Anthon… 147 Color Action… USA A partir de … ## # … with 3,797 more rows, and 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; imdb %&gt;% arrange(desc(ano), titulo) %&gt;% select(titulo, ano, everything()) ## # A tibble: 3,807 x 15 ## titulo ano diretor duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 10 Cl… 2016 Dan Tr… 104 Color Drama|… USA A partir de … 15000000 ## 2 13 Ho… 2016 Michae… 144 Color Action… USA A partir de … 50000000 ## 3 A Beg… 2016 Mitche… 87 Color Comedy… USA Outros NA ## 4 Alice… 2016 James … 113 Color Advent… USA Livre 170000000 ## 5 Alleg… 2016 Robert… 120 Color Action… USA A partir de … 110000000 ## 6 Allel… 2016 Darren… 97 Color Horror… USA Outros 500000 ## 7 Antib… 2016 Danny … 94 Color Horror USA Outros 3500000 ## 8 Bad M… 2016 Jon Lu… 100 Color Comedy USA A partir de … 20000000 ## 9 Bad M… 2016 Jon Lu… 100 Color Comedy USA A partir de … 20000000 ## 10 Batma… 2016 Zack S… 183 Color Action… USA A partir de … 250000000 ## # … with 3,797 more rows, and 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; 7.2.4 Criando e modificando colunas A função mutate() cria ou modifica colunas. Ela é equivalente à função transform(), mas aceita várias novas colunas iterativamente. Novas variáveis devem ter o mesmo número de linhas da base original (ou comprimento 1). # A coluna &quot;duracao&quot; é sobrescrita imdb %&gt;% mutate(duracao = duracao/60) %&gt;% select(duracao) ## # A tibble: 3,807 x 1 ## duracao ## &lt;dbl&gt; ## 1 2.97 ## 2 2.82 ## 3 2.73 ## 4 2.2 ## 5 2.6 ## 6 1.67 ## 7 2.35 ## 8 3.05 ## 9 2.82 ## 10 2.52 ## # … with 3,797 more rows # Criamos uma nova coluna na base imdb %&gt;% mutate(duracao_horas = duracao/60) %&gt;% select(duracao, duracao_horas) ## # A tibble: 3,807 x 2 ## duracao duracao_horas ## &lt;int&gt; &lt;dbl&gt; ## 1 178 2.97 ## 2 169 2.82 ## 3 164 2.73 ## 4 132 2.2 ## 5 156 2.6 ## 6 100 1.67 ## 7 141 2.35 ## 8 183 3.05 ## 9 169 2.82 ## 10 151 2.52 ## # … with 3,797 more rows # Podemos fazer diversas operações em um mesmo mutate. imdb %&gt;% mutate( lucro = receita - orcamento, resultado = ifelse(lucro &lt; 0, &quot;prejuizo&quot;, &quot;lucro&quot;) ) %&gt;% select(lucro, resultado) ## # A tibble: 3,807 x 2 ## lucro resultado ## &lt;int&gt; &lt;chr&gt; ## 1 523505847 lucro ## 2 9404152 lucro ## 3 198130642 lucro ## 4 -190641321 prejuizo ## 5 78530303 lucro ## 6 -59192738 prejuizo ## 7 208991599 lucro ## 8 80249062 lucro ## 9 -8930592 prejuizo ## 10 198032628 lucro ## # … with 3,797 more rows 7.2.5 Summarisando a base A função summarise() sumariza a base. Ela aplica uma função às variáveis, retornando um vetor de tamanho 1. Ela é utilizada em conjunto da função group_by(). A função n() costuma ser bastante utilizada com a função summarise(). imdb %&gt;% summarise(media_orcamento = mean(orcamento, na.rm = TRUE)) ## # A tibble: 1 x 1 ## media_orcamento ## &lt;dbl&gt; ## 1 35755986. imdb %&gt;% summarise( media_orcamento = mean(orcamento, na.rm = TRUE), mediana_orcamento = median(orcamento, na.rm = TRUE), qtd = n(), qtd_diretores = n_distinct(diretor) ) ## # A tibble: 1 x 4 ## media_orcamento mediana_orcamento qtd qtd_diretores ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 35755986. 20000000 3807 1813 imdb %&gt;% group_by(ano) %&gt;% summarise(qtd_filmes = n()) ## # A tibble: 91 x 2 ## ano qtd_filmes ## &lt;int&gt; &lt;int&gt; ## 1 1916 1 ## 2 1920 1 ## 3 1925 1 ## 4 1929 1 ## 5 1930 1 ## 6 1932 1 ## 7 1933 2 ## 8 1934 1 ## 9 1935 1 ## 10 1936 2 ## # … with 81 more rows imdb %&gt;% group_by(diretor) %&gt;% summarise(orcamento_medio = mean(orcamento, na.rm = TRUE)) ## # A tibble: 1,813 x 2 ## diretor orcamento_medio ## &lt;chr&gt; &lt;dbl&gt; ## 1 A. Raven Cruz 1000000 ## 2 Aaron Hann NaN ## 3 Aaron Schneider 7500000 ## 4 Aaron Seltzer 20000000 ## 5 Abel Ferrara 12500000 ## 6 Adam Carolla 1500000 ## 7 Adam Goldberg 1650000 ## 8 Adam Green 1500000 ## 9 Adam Jay Epstein NaN ## 10 Adam Marcus 2500000 ## # … with 1,803 more rows 7.2.6 Juntando duas bases Para juntar duas tabelas de dados, podemos utilizar a família de funções _join() do dplyr. Essas funções geralmente recebem três argumentos: uma base esquerda (x=), uma base direita (y=) e uma chave by=. As principais funções _join() são: left_join(x, y): retorna todas as linhas da base x e todas as colunas das bases x e y. Linhas de x sem correspondentes em y receberão NA na nova base. right_join(): retorna todas as linhas da base y e todas as colunas das bases x e y. Linhas de y sem correspondentes em x receberão NA na nova base. full_join(): retorna todas as linhas e colunas de xe y. Valores sem correspondência entre as bases receberão NA na nova base. A figura a seguir esquematiza as operações dessas funções: A figura a seguir mostra o que acontece quando temos chaves duplicadas em um left_join(). A ideia é equivalante para as outras funções. "],
["7-3-tidyr.html", "7.3 O pacote tidyr", " 7.3 O pacote tidyr O pacote tidyr dispõe de funções úteis para deixar os seus dados no formato que você precisa para a análise. Na maioria das vezes, utilizamos para deixá-los tidy. Outras, precisamos “bagunçá-los” um pouco para poder aplicar alguma função específica. As principais funções deste pacote são a gather() e a spread() 7.3.1 gather() A função gather() “empilha” o banco de dados. Ela é utilizada principalmente quando as colunas da base não representam nomes de variáveis, mas sim seus valores. library(tidyr) imdb &lt;- readr::read_rds(&quot;assets/data/imdb.rds&quot;) imdb_gather &lt;- imdb %&gt;% mutate(id = 1:n()) %&gt;% gather( key = &quot;importancia_ator&quot;, value = &quot;nome_ator&quot;, ator_1, ator_2, ator_3 ) %&gt;% select(nome_ator, importancia_ator, everything()) imdb_gather ## # A tibble: 11,421 x 15 ## nome_ator importancia_ator titulo ano diretor duracao cor generos pais ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 CCH Poun… ator_1 Avata… 2009 James … 178 Color Action… USA ## 2 Johnny D… ator_1 Pirat… 2007 Gore V… 169 Color Action… USA ## 3 Tom Hardy ator_1 The D… 2012 Christ… 164 Color Action… USA ## 4 Daryl Sa… ator_1 John … 2012 Andrew… 132 Color Action… USA ## 5 J.K. Sim… ator_1 Spide… 2007 Sam Ra… 156 Color Action… USA ## 6 Brad Gar… ator_1 Tangl… 2010 Nathan… 100 Color Advent… USA ## 7 Chris He… ator_1 Aveng… 2015 Joss W… 141 Color Action… USA ## 8 Henry Ca… ator_1 Batma… 2016 Zack S… 183 Color Action… USA ## 9 Kevin Sp… ator_1 Super… 2006 Bryan … 169 Color Action… USA ## 10 Johnny D… ator_1 Pirat… 2006 Gore V… 151 Color Action… USA ## # … with 11,411 more rows, and 6 more variables: classificacao &lt;chr&gt;, ## # orcamento &lt;int&gt;, receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, likes_facebook &lt;int&gt;, ## # id &lt;int&gt; 7.3.2 spread() A função spread() é essencialmente o inverso da gather(). Ela espalha uma variável nas colunas. imdb_spread &lt;- imdb_gather %&gt;% spread( key = importancia_ator, value = nome_ator ) imdb_spread ## # A tibble: 3,807 x 16 ## titulo ano diretor duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Avata… 2009 James … 178 Color Action… USA A partir de … 237000000 ## 2 Pirat… 2007 Gore V… 169 Color Action… USA A partir de … 300000000 ## 3 The D… 2012 Christ… 164 Color Action… USA A partir de … 250000000 ## 4 John … 2012 Andrew… 132 Color Action… USA A partir de … 263700000 ## 5 Spide… 2007 Sam Ra… 156 Color Action… USA A partir de … 258000000 ## 6 Tangl… 2010 Nathan… 100 Color Advent… USA Livre 260000000 ## 7 Aveng… 2015 Joss W… 141 Color Action… USA A partir de … 250000000 ## 8 Batma… 2016 Zack S… 183 Color Action… USA A partir de … 250000000 ## 9 Super… 2006 Bryan … 169 Color Action… USA A partir de … 209000000 ## 10 Pirat… 2006 Gore V… 151 Color Action… USA A partir de … 225000000 ## # … with 3,797 more rows, and 7 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, id &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; 7.3.3 Outras funções do tidyr A função unite() junta duas ou mais colunas usando algum separador (_, por exemplo). A função separate() faz o inverso de unite(): transforma uma coluna em várias usando um separador. imdb %&gt;% unite( col = &quot;titulo_diretor&quot;, titulo, diretor, sep = &quot; - &quot; ) ## # A tibble: 3,807 x 14 ## titulo_diretor ano duracao cor generos pais classificacao orcamento ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Avatar  - Jam… 2009 178 Color Action… USA A partir de … 237000000 ## 2 Pirates of th… 2007 169 Color Action… USA A partir de … 300000000 ## 3 The Dark Knig… 2012 164 Color Action… USA A partir de … 250000000 ## 4 John Carter  … 2012 132 Color Action… USA A partir de … 263700000 ## 5 Spider-Man 3 … 2007 156 Color Action… USA A partir de … 258000000 ## 6 Tangled  - Na… 2010 100 Color Advent… USA Livre 260000000 ## 7 Avengers: Age… 2015 141 Color Action… USA A partir de … 250000000 ## 8 Batman v Supe… 2016 183 Color Action… USA A partir de … 250000000 ## 9 Superman Retu… 2006 169 Color Action… USA A partir de … 209000000 ## 10 Pirates of th… 2006 151 Color Action… USA A partir de … 225000000 ## # … with 3,797 more rows, and 6 more variables: receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, ## # likes_facebook &lt;int&gt;, ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; imdb %&gt;% separate( col = generos, into = c(&quot;genero_1&quot;, &quot;genero_2&quot;, &quot;genero_3&quot;), sep = &quot;\\\\|&quot;, extra = &quot;drop&quot; ) ## # A tibble: 3,807 x 17 ## titulo ano diretor duracao cor genero_1 genero_2 genero_3 pais ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Avata… 2009 James … 178 Color Action Adventu… Fantasy USA ## 2 Pirat… 2007 Gore V… 169 Color Action Adventu… Fantasy USA ## 3 The D… 2012 Christ… 164 Color Action Thriller &lt;NA&gt; USA ## 4 John … 2012 Andrew… 132 Color Action Adventu… Sci-Fi USA ## 5 Spide… 2007 Sam Ra… 156 Color Action Adventu… Romance USA ## 6 Tangl… 2010 Nathan… 100 Color Adventu… Animati… Comedy USA ## 7 Aveng… 2015 Joss W… 141 Color Action Adventu… Sci-Fi USA ## 8 Batma… 2016 Zack S… 183 Color Action Adventu… Sci-Fi USA ## 9 Super… 2006 Bryan … 169 Color Action Adventu… Sci-Fi USA ## 10 Pirat… 2006 Gore V… 151 Color Action Adventu… Fantasy USA ## # … with 3,797 more rows, and 8 more variables: classificacao &lt;chr&gt;, ## # orcamento &lt;int&gt;, receita &lt;int&gt;, nota_imdb &lt;dbl&gt;, likes_facebook &lt;int&gt;, ## # ator_1 &lt;chr&gt;, ator_2 &lt;chr&gt;, ator_3 &lt;chr&gt; "],
["8-graficos.html", "Capítulo 8 Gráficos ", " Capítulo 8 Gráficos "],
["8-1-o-pacote-ggplot2.html", "8.1 O pacote ggplot2", " 8.1 O pacote ggplot2 "],
["8-2-o-pacote-plotly.html", "8.2 O pacote plotly", " 8.2 O pacote plotly "],
["8-3-extensões-do-ggplot2.html", "8.3 Extensões do ggplot2", " 8.3 Extensões do ggplot2 "],
["9-funcionais.html", "Capítulo 9 Funcionais", " Capítulo 9 Funcionais "],
["10-misc.html", "Capítulo 10 Miscelânea ", " Capítulo 10 Miscelânea "],
["10-1-arrumando-banco-de-dados-o-pacote-janitor.html", "10.1 Arrumando banco de dados: o pacote janitor", " 10.1 Arrumando banco de dados: o pacote janitor Vamos falar do pacote janitor, que traz algumas funções para dar aquele trato nas BDs. Antes de mais nada, instale e carregue o pacote: install.packages(&quot;janitor&quot;) devtools::install_github(&quot;sfirke/janitor&quot;) # Versão de desenvolvimento library(tidyverse) library(janitor) 10.1.1 Arrumando o nome das variáveis Assim como no post passado, utilizaremos a base com informações de pacientes com arritmia cardíaca, cujas variáveis selecionadas foram: dados %&gt;% names() ## [1] &quot;ID&quot; &quot;Sexo&quot; &quot;Nascimento&quot; ## [4] &quot;Idade&quot; &quot;Inclusão&quot; &quot;Cor&quot; ## [7] &quot;Peso&quot; &quot;Altura&quot; &quot;cintura&quot; ## [10] &quot;IMC&quot; &quot;Superfície corporal&quot; &quot;Tabagismo&quot; ## [13] &quot;cg.tabag (cig/dia)&quot; &quot;Alcool (dose/semana)&quot; &quot;Drogas ilícitas&quot; ## [16] &quot;Cafeína/dia&quot; &quot;Refrig/dia&quot; &quot;Sedentario&quot; ## [19] &quot;ativ. Fisica&quot; Os nomes têm letras maiúsculas, acentos, parênteses, pontos e barras, o que atrapalha na hora da programação. Para resolver esse problema, usamos a função clean_names(). dados %&gt;% janitor::clean_names() %&gt;% names() ## [1] &quot;id&quot; &quot;sexo&quot; &quot;nascimento&quot; ## [4] &quot;idade&quot; &quot;inclusao&quot; &quot;cor&quot; ## [7] &quot;peso&quot; &quot;altura&quot; &quot;cintura&quot; ## [10] &quot;imc&quot; &quot;superficie_corporal&quot; &quot;tabagismo&quot; ## [13] &quot;cg_tabag_cig_dia&quot; &quot;alcool_dose_semana&quot; &quot;drogas_ilicitas&quot; ## [16] &quot;cafeina_dia&quot; &quot;refrig_dia&quot; &quot;sedentario&quot; ## [19] &quot;ativ_fisica&quot; Veja que a função removeu os parênteses, pontos e barras e substituiu os espaços por _. No entanto, ela não remove os acentos. Assim, podemos adicionar mais uma linha ao pipeline para chegar onde queremos. dados %&gt;% janitor::clean_names() %&gt;% names() %&gt;% abjutils::rm_accent() ## [1] &quot;id&quot; &quot;sexo&quot; &quot;nascimento&quot; ## [4] &quot;idade&quot; &quot;inclusao&quot; &quot;cor&quot; ## [7] &quot;peso&quot; &quot;altura&quot; &quot;cintura&quot; ## [10] &quot;imc&quot; &quot;superficie_corporal&quot; &quot;tabagismo&quot; ## [13] &quot;cg_tabag_cig_dia&quot; &quot;alcool_dose_semana&quot; &quot;drogas_ilicitas&quot; ## [16] &quot;cafeina_dia&quot; &quot;refrig_dia&quot; &quot;sedentario&quot; ## [19] &quot;ativ_fisica&quot; E para substituir na base. nomes &lt;- dados %&gt;% janitor::clean_names() %&gt;% names() %&gt;% abjutils::rm_accent() names(dados) &lt;- nomes 10.1.2 Removendo linhas e colunas vazias Esse banco de dados também tinha outro problema: linhas vazias. Na verdade, elas não eram completamente vazias, pois havia algumas informações de identificação do paciente, mas nenhuma outra variável tinha sido computada. dados[3,] ## # A tibble: 1 x 19 ## id sexo nascimento idade inclusao cor peso altura ## &lt;int&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3 &lt;NA&gt; NA NA NA &lt;NA&gt; NA NA ## # … with 11 more variables: cintura &lt;chr&gt;, imc &lt;dbl&gt;, ## # superficie_corporal &lt;chr&gt;, tabagismo &lt;chr&gt;, cg_tabag_cig_dia &lt;dbl&gt;, ## # alcool_dose_semana &lt;dbl&gt;, drogas_ilicitas &lt;chr&gt;, cafeina_dia &lt;dbl&gt;, ## # refrig_dia &lt;dbl&gt;, sedentario &lt;chr&gt;, ativ_fisica &lt;chr&gt; Essa foi a solução que eu pensei para resolver o problema utilizando a função remove_empty(). dados &lt;- dados %&gt;% as.data.frame %&gt;% dplyr::select(-id) %&gt;% janitor::remove_empty() %&gt;% tibble::rownames_to_column(&quot;id&quot;) %&gt;% dplyr::select(id, everything()) ## value for &quot;which&quot; not specified, defaulting to c(&quot;rows&quot;, &quot;cols&quot;) dados %&gt;% tibble::as_tibble() ## # A tibble: 4 x 19 ## id sexo nascimento idade inclusao cor peso altura ## &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 F 1964-01-31 00:00:00 41 2006-02-17 00:00:00 bran… 75 1.63 ## 2 2 M 1959-01-28 00:00:00 45 2005-11-29 00:00:00 negra 71 1.7 ## 3 4 M 1957-09-13 00:00:00 50 2008-02-13 00:00:00 NT 80 1.64 ## 4 5 F 1938-02-06 00:00:00 71 2009-06-25 00:00:00 parda 56 1.51 ## # … with 11 more variables: cintura &lt;chr&gt;, imc &lt;dbl&gt;, ## # superficie_corporal &lt;chr&gt;, tabagismo &lt;chr&gt;, cg_tabag_cig_dia &lt;dbl&gt;, ## # alcool_dose_semana &lt;dbl&gt;, drogas_ilicitas &lt;chr&gt;, cafeina_dia &lt;dbl&gt;, ## # refrig_dia &lt;dbl&gt;, sedentario &lt;chr&gt;, ativ_fisica &lt;chr&gt; Eu precisei converter para data.frame primeiro porque não é possível definir os nomes das linhas de uma tibble. Se a linha estivesse completamente vazia, bastaria usar diretamente a função remove_empty_rows(). Equivalentemente para colunas, existe a função remove_empty_cols(). 10.1.3 Identificando linhas duplicadas O pacote janitor possui uma função para identificar entradas duplicadas numa base de dados: get_dupes(). Vamos criar uma base genérica para testá-la. p_nome &lt;- c(&quot;Athos&quot;, &quot;Daniel&quot;, &quot;Fernando&quot;, &quot;Julio&quot;, &quot;William&quot;) sobrenome &lt;- c(&quot;Damiani&quot;, &quot;Falbel&quot;, &quot;Corrêa&quot;, &quot;Trecenti&quot;, &quot;Amorim&quot;) base_qualquer &lt;- tibble::tibble( nome = sample(p_nome, 25, replace = TRUE), sobrenome = sample(sobrenome, 25, replace = TRUE), variavel_importante = rnorm(25) ) janitor::get_dupes(base_qualquer, nome, sobrenome) ## # A tibble: 15 x 4 ## nome sobrenome dupe_count variavel_importante ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Athos Damiani 3 1.81 ## 2 Athos Damiani 3 0.895 ## 3 Athos Damiani 3 0.947 ## 4 Daniel Amorim 3 -1.87 ## 5 Daniel Amorim 3 0.768 ## 6 Daniel Amorim 3 0.732 ## 7 Julio Corrêa 2 1.22 ## 8 Julio Corrêa 2 -0.692 ## 9 Julio Damiani 2 -0.113 ## 10 Julio Damiani 2 -0.0997 ## 11 William Amorim 2 1.01 ## 12 William Amorim 2 -0.156 ## 13 William Damiani 3 -0.475 ## 14 William Damiani 3 1.19 ## 15 William Damiani 3 0.507 Todas as linhas na tibble resultante representam uma combinação de nome-sobrenome repetida. 10.1.4 Outras funções Por fim, o janitor também tem funções equivalentes à table() para produzir tabelas de frequência: tabyl() - similar a table(), mas pipe-ável e com mais recursos. adorn_totals() - acrescenta o total das linhas ou colunas. mtcars %&gt;% janitor::tabyl(cyl) ## cyl n percent ## 4 11 0.34375 ## 6 7 0.21875 ## 8 14 0.43750 mtcars %&gt;% janitor::tabyl(cyl) %&gt;% janitor::adorn_totals() ## cyl n percent ## 4 11 0.34375 ## 6 7 0.21875 ## 8 14 0.43750 ## Total 32 1.00000 mtcars %&gt;% janitor::tabyl(cyl, am) %&gt;% janitor::adorn_totals(where = &quot;col&quot;) ## cyl 0 1 Total ## 4 3 8 11 ## 6 4 3 7 ## 8 12 2 14 É isso! Espero que essas dicas e o pacote janitor ajudem a agilizar as suas análises :) "],
["11-respostas-1.html", "Capítulo 11 Respostas", " Capítulo 11 Respostas –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; –&gt; "],
["referências.html", "Referências", " Referências Allison Horst As ilustrações contidas nesse livro são da Allison Horst. Acompanhe o trabalho dela: https://github.com/allisonhorst Repositório com as ilustrações: https://github.com/allisonhorst/stats-illustrations Siga a Allison no Twitter: https://twitter.com/allison_horst "]
]
