[
["r-básico.html", "Capítulo 3 R Básico 3.1 Pedindo Ajuda 3.2 R como calculadora 3.3 Objetos 3.4 Data frames 3.5 Classes 3.6 Vetores 3.7 Testes lógicos 3.8 Valores especiais 3.9 Listas 3.10 Mais sobre data frames 3.11 Funções 3.12 Controle de Fluxo 3.13 Outros tópicos 3.14 Exercícios", " Capítulo 3 R Básico Introduziremos aqui os principais conceitos de programação em R. Indicamos a leitura deste capítulo a quem nunca teve contato com uma linguagem de programação ou a quem gostaria de entender um pouco melhor a estrutura de objetos, funções e classes do R. Os tópicos discutidos aqui são especialmente importantes para entendermos o que é um data frame, a nossa base de dados dentro do R, e quais operações estão sendo realizadas por trás das cortinas quando estivermos filtrando suas linhas ou modificando suas colunas. Também são importantes para começarmos a criar as nossas próprias funções, o que deixa nossos códigos muito mais organizados, eficientes e compartilháveis. 3.1 Pedindo Ajuda A linguagem R é bem intuitiva. É possível fazer bastante coisa à base da tentativa e erro. Além disso, grande parte do conhecimento é escalável, isto é, aprender a utilizar uma função é meio caminho andado para aprender todas as outras funções que operam de forma semelhante1. No entanto, a intuição não infalível, e recorrentemente vamos precisar de ajuda para rodar alguma função ou descobrir como fazer alguma tarefa no R. Felizmente, a comunidade R é bem ativa e existem vários lugares para buscar respostas. Nesta seção, vamos apresentar as principais maneiras algumas dessas maneiras. Figure 3.1: Arte por Allison Horst. Veja nas Referências onde encontrá-la. No R, há quatro principais entidades para se pedir ajuda: Help/documentação do R Google Stack Overflow Coleguinha A busca por ajuda é feita preferencialmente, mas não necessariamente, na ordem acima. 3.1.1 Documentação do R A documentação do R serve para você aprender a usar uma determinada função. Se você não sabe o que é uma função, não se preocupe. Discutiremos esse tópico na Seção 3.11. Você pode acessar a documentação de uma função2 das seguintes maneiras: ?mean help(mean) Algumas dicas: Leia a seção Usage para ter noção de como usar a função. Os parâmetros da função estão descritos em Arguments. Os exemplos no final são particularmente úteis. Caso essa função não atenda às suas necessidades, a seção See Also sugere funções relacionadas. Alguns pacotes possuem tutorias de uso mais completos. Esses textos são chamados de vignettes e podem ser acessados com a função vignette(package = 'nomeDoPacote'). Por exemplo, vignette(package = 'dplyr'). 3.1.2 Google Há uma comunidade gigantesca de usuários de R gerando diariamente uma infinidade de conteúdos e discussões. Não raramente, você irá encontrar discussões sobre o seu problema simplesmente o descrevendo no Google. Pesquisas em inglês aumentam consideravelmente a chance de encontrar uma resposta. Quando você recebe um erro na tentativa de rodar algum código no R e não sabe o que está errado, uma boa estratégia é pesquisar a mensagem de erro no Google. Essa deve ser sua primeira tentativa para resolver o problema. Repare na imagem abaixo o ‘r’ adicionado na busca. Isso ajuda bastante a encontrar uma solução. log(&quot;5&quot;) ## Error in log(&quot;5&quot;): non-numeric argument to mathematical function 3.1.3 Stack Overflow O Stack Overflow e o Stack Overflow em Português são sites de Pergunta e Resposta amplamente utilizados por todas as linguagens de programação, e o R é uma delas. Nos EUA, chegam até a usar a reputação dos usuários dentro da plataforma como diferencial no currículo! Provavelmente o Google lhe indicará uma página deles quando você estiver procurando ajuda. E quando todas as fontes possíveis de ajuda falharem, o Stack Overflow lhe dará o espaço para criar sua própria pergunta. Um ponto importante: como fazer uma boa pergunta no Stack Overflow? No site, existe um tutorial com uma lista de boas práticas, que se encontra aqui. Resumindo, as principais dicas são ser conciso; ser específico; ter mente aberta; e ser gentil. Porém, no caso do R, há outro requisito que vai aumentar muito sua chance de ter uma boa resposta: exemplinho minimal e reprodutível. Ser minimal: usar bancos de dados menores e utilizar pedaços de códigos apenas suficientes para apresentar o seu problema. Não precisa de banco de dados de um milhão de linhas e nem colocar o seu código inteiro para descrever a sua dúvida. Ser reprodutível: o seu código deve rodar fora da sua máquina. Se você não fornecer uma versão do seu problema que rode (ou que imite seu erro), as pessoas vão logo desistir de te ajudar. Por isso, nunca coloque bancos de dados que só você tem acesso. Use bancos de dados que já vem no R ou disponibilize um exemplo (possivelmente anonimizado) em .csv na web para baixar. E se precisar utilizar funções de algum pacote, especifique os pacotes que você usou. 3.2 R como calculadora O papel do Console no R é executar os nossos comandos. Ele avalia o código que passamos para ele e devolve a saída correspondente — se tudo der certo — ou uma mensagem de erro — se o seu código tiver algum problema. Vamos começar com o exemplo mais simples possível: 1 + 1 ## [1] 2 Nesse caso, o nosso comando foi o código 1 + 1 e saída foi o valor 2. Nota: quando compilamos? Quem vem de linguagens como o C ou Java espera que seja necessário compilar o código em texto para o código das máquinas (geralmente um código binário). No R, isso não é necessário. O R é uma linguagem de programação dinâmica que interpreta o seu código enquanto você o executa. Tente agora jogar no console a expressão: 2 * 2 - (4 + 4) / 2. Pronto! Você já é capaz de pedir ao R para fazer qualquer uma das quatro operações aritméticas básicas. A seguir, apresentamos uma lista resumindo como fazer as principais operações no R. # adição 1 + 1 ## [1] 2 # subtração 4 - 2 ## [1] 2 # multiplicação 2 * 3 ## [1] 6 # divisão 5 / 3 ## [1] 1.666667 # potência 4 ^ 2 ## [1] 16 # resto da divisão de 5 por 3 5 %% 3 ## [1] 2 # parte inteira da divisão de 5 por 3 5 %/% 3 ## [1] 1 Repare que as operações e suas precedências são mantidas como na matemática, ou seja, divisão e multiplicação são calculadas antes da adição e subtração. E os parênteses nunca são demais! Uma outra forma de executar uma expressão é escrever o código em um script, deixar o cursor em cima da linha e usar o atalho Ctrl + Enter. Assim, o comando é enviado para o Console, onde é diretamente executado. Essa operação é chamada de avaliar, executar ou rodar o código. Se você digitar um comando incompleto, como 5 +, e apertar Enter, o R mostrará um +, o que não tem nada a ver com a adição da matemática. Isso significa que o R está esperando que você enviar mais algum código para completar o seu comando. Termine o seu comando ou aperte Esc para recomeçar. &gt; 5 - + + 5 [1] 0 Se você digitar um comando que o R não reconhece, ele retornará uma mensagem de erro. NÃO ENTRE EM PÂNICO! Ele só está avisando que não conseguiu interpretar o comando. Você pode digitar outro comando normalmente em seguida. &gt; 5 % 2 Error: unexpected input in &quot;5 % 2&quot; &gt; 5 ^ 2 [1] 25 3.3 Objetos O R te permite salvar valores dentro de um objeto. Um objeto é simplesmente um nome que guarda um valor. Para criar um objeto, utilizamos o operador &lt;-. No exemplo abaixo, salvamos o valor 1 em a. Sempre que avaliarmos o objeto a, o R vai devolver o valor 1. # Salvando `1` em `a` a &lt;- 1 # Avaliando o objeto `a` a ## [1] 1 Existem algumas regras para dar nomes aos objetos. A mais importante é: o nome deve começar com uma letra3. O nome pode conter números, mas não pode começar com números. Você pode usar pontos . e underlines _ para separar palavras. # Permitido x &lt;- 1 x1 &lt;- 2 objeto &lt;- 3 meu_objeto &lt;- 4 meu.objeto &lt;- 5 # Não permitido 1x &lt;- 1 _objeto &lt;- 2 meu-objeto &lt;- 3 Atenção! O R diferencia letras maiúsculas e minúsculas, isto é, b é considerado um objeto diferente de B. Rode o exemplo abaixo e observe que dois objetos diferentes são criados no Environment. b &lt;- 2 B &lt;- 3 b ## [1] 2 B ## [1] 3 O objeto mais importante para o cientista de dados é, claro, a base de dados. No R, uma base de dados é representa por objetos chamados de data frames. A seguir, vamos entender o que são esses objetos. 3.4 Data frames Os data frames são de extrema importância no R, pois são os objetos que guardam os nossos dados. Eles são equivalentes a uma tabela do SQL ou uma planilha do Excel. A principal característica de um data frame é possuir linhas e colunas4. Veja o exemplo abaixo: mtcars ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 O mtcars é um data frame nativo do R que contém informações sobre diversos modelos de carros. Ele possui 32 linhas e 11 colunas5. Se você quiser saber mais sobre o mtcars, veja a documentação dele rodando ?mtcars no Console. Nos próximos capítulos, os data frames serão o nosso principal objeto de estudo. Aprenderemos a selecionar, criar e modificar colunas, filtrar e ordenar linhas, juntar dois data frames e, a partir deles, construiremos gráficos e ajustaremos modelos. Mas, da mesma forma que é muito mais fácil aprendermos a fritar um ovo após entendermos o que é o fogo, uma frigideira e um ovo, vamos estudar nas próximas seções quais são as estruturas que formam os data frames e como manipulá-las. 3.5 Classes A classe de um objeto é muito importante dentro do R. É a partir dela que as funções e operadores conseguem saber exatamente o que fazer com um objeto. Por exemplo, podemos somar dois números, mas não conseguimos somar duas letras (texto): 1 + 1 ## [1] 2 &quot;a&quot; + &quot;b&quot; ## Error in &quot;a&quot; + &quot;b&quot;: non-numeric argument to binary operator O operador + verifica que \"a\" e \"b\" não são números (ou que a classe deles não é numérica) e devolve uma mensagem de erro informando isso. Observe que para criar texto no R, colocamos os caracteres entre aspas. As aspas servem para diferenciar nomes (objetos, funções, pacotes) de textos (letras e palavras). Os textos são muito comuns em variáveis categóricas. a &lt;- 10 # O objeto `a`, sem aspas a ## [1] 10 # A letra (texto) `a`, com aspas &quot;a&quot; ## [1] &quot;a&quot; Para saber a classe de um objeto, basta rodarmos class(nome-do-objeto). x &lt;- 1 class(x) ## [1] &quot;numeric&quot; y &lt;- &quot;a&quot; class(y) ## [1] &quot;character&quot; class(mtcars) ## [1] &quot;data.frame&quot; As classes mais básicas dentro do R são: numeric character logical Veja alguns exemplos: # numeric 1 0.10 0.95 pi # characters &quot;a&quot; &quot;1&quot; &quot;positivo&quot; # logical TRUE FALSE Um objeto de qualquer uma dessas classes é chamado de objeto atômico. Esse nome se deve ao fato de essas classes não se misturarem, isto é, para um objeto ter a classe numeric, por exemplo, todos os seus valores precisam ser numéricos. Mas como atribuir mais de um valor a um mesmo objeto? Para isso, precisamos criar vetores. 3.6 Vetores Vetores no R são apenas conjuntos indexados de valores. Para criá-los, basta colocar os valores separados por vírgulas dentro de um c(). vetor1 &lt;- c(1, 5, 3, -10) vetor2 &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) vetor1 ## [1] 1 5 3 -10 vetor2 ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; Os objetos vetor1 e vetor2 são vetores. Quando dizemos que vetores são conjuntos indexados, isso quer dizer que cada valor dentro de um vetor tem uma posição6. Isso nos permite acessar individualmente cada valor de um vetor. Para isso, colocamos o índice do valor que queremos acessar dentro de colchetes []. vetor &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) vetor[1] ## [1] &quot;a&quot; vetor[2] ## [1] &quot;b&quot; vetor[3] ## [1] &quot;c&quot; vetor[4] ## [1] &quot;d&quot; Você também pode colocar um conjunto de índices dentro dos colchetes, para pegar os valores contidos nessas posições: vetor[c(2, 3)] ## [1] &quot;b&quot; &quot;c&quot; vetor[c(1, 2, 4)] ## [1] &quot;a&quot; &quot;b&quot; &quot;d&quot; Essa operação é conhecida como subsetting, pois estamos pegando subconjuntos de valores de um vetor. Se você tentar acessar uma posição do vetor que não existe, ele retornará NA, indicando que esse valor não existe. Discutiremos o que são NA’s na Seção @ref(valores_especiais). vetor[5] ## [1] NA Um vetor só pode guardar um tipo de objeto e ele terá sempre a mesma classe dos objetos que guarda. Para saber a classe de um vetor, rodamos class(nome-do-vetor). vetor1 &lt;- c(1, 5, 3, -10) vetor2 &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) class(vetor1) ## [1] &quot;numeric&quot; class(vetor2) ## [1] &quot;character&quot; Se tentarmos misturar duas classes, o R vai apresentar o comportamento conhecido como coerção. vetor &lt;- c(1, 2, &quot;a&quot;) vetor ## [1] &quot;1&quot; &quot;2&quot; &quot;a&quot; class(vetor) ## [1] &quot;character&quot; Veja que todos os elementos do vetor se transformaram em texto. Agora temos um vetor com o texto \"1\", o texto \"2\" e o texto \"a\". Como um vetor só pode ter uma classe de objeto dentro dele, classes mais fracas serão sempre reprimidas pelas classes mais fortes. Como regra de bolso: caracteres serão sempre a classe mais forte. Então, sempre que você misturar números e texto em um vetor, os números virarão texto. Falaremos bastante de coerção nas próximas seções e capítulos, trazendo exemplos de quando ela ajuda e de quando ela atrapalha. De forma bastante intuitiva, você pode fazer operações com vetores. vetor &lt;- c(0, 5, 20, -3) vetor + 1 ## [1] 1 6 21 -2 Ao rodarmos vetor1 - 1, o R subtrai 1 de cada um dos elementos do vetor. O mesmo acontece com qualquer outra operação aritmética. vetor - 1 vetor / 2 vetor * 10 Você também pode fazer operações que envolvem mais de um vetor: vetor1 &lt;- c(1, 2, 3) vetor2 &lt;- c(10, 20, 30) vetor1 + vetor2 ## [1] 11 22 33 Neste caso, o R irá alinhar os dois vetores e somar elemento a elemento. Esse tipo de comportamento é chamado de vetorização. Isso pode ficar um pouco confuso quando os dois vetores não possuem o mesmo tamanho. Tente adivinhar qual será a saída do código a seguir: vetor1 &lt;- c(1, 2) vetor2 &lt;- c(10, 20, 30, 40) vetor1 + vetor2 ## [1] 11 22 31 42 Embora estejamos somando dois vetores de tamanho diferentes, o R não devolve um erro (o que parecia ser a resposta mais intuitiva). O R alinhou os dois vetores e, como eles não possuíam o mesmo tamanho, o primeiro foi repetido para ficar do mesmo tamanho do segundo. É como se o primeiro vetor fosse na verdade c(1, 2, 1, 2). Esse comportamento é chamado de reciclagem. Embora contra-intuitiva, a reciclagem é muito útil no R graças a um caso particular muito importante. Quando somamos vetor + 1 no nosso primeiro exemplo, o que o R está fazendo por trás é transformando o 1 em c(1, 1, 1, 1) e realizando a soma vetorizada c(0, 5, 20, -3) + c(1, 1, 1, 1). Isso porque o número 1 nada mais é do que um vetor de tamanho 1, isto é, 1 é igual a c(1). Usaremos esse comportamento no R o tempo todo e é muito importante a reciclagem para termos certeza de que o R está fazendo exatamente aquilo que gostaríamos que ele fizesse. Um outro caso interessante de reciclagem é quando o comprimento dos vetores não são múltiplos um do outro. vetor1 &lt;- c(1, 2, 3) vetor2 &lt;- c(10, 20, 30, 40, 50) vetor1 + vetor2 ## Warning in vetor1 + vetor2: longer object length is not a multiple of shorter ## object length ## [1] 11 22 33 41 52 Neste caso, duas coisas aconteceram: O R realizou a conta, repetindo cada valor do primeiro vetor até que os dois tenham o mesmo tamanho. No fundo, a operação realizada foi c(1, 2, 3, 1, 2) + c(10, 20, 30, 40, 50). Como essa operação é ainda menos intuitiva e raramente desejada, o R devolveu um aviso dizendo que o comprimento do primeiro vetor maior não é um múltiplo do comprimento do vetor menor. 3.7 Testes lógicos Pode fazer qualquer tipo de operação lógica é um dos motivos pelos quais programar nos deixar mais eficientes. Dê bastante atenção a elas, pois usaremos comparações lógicas o tempo todo! Uma operação lógica nada mais é do que um teste que retorna verdadeiro ou falso. No R (e em outras linguagens de programação), esses valores dois valores recebem uma classe especial: logical. O verdadeiro no R vai ser representado pelo valor TRUE e o falso pelo valor FALSE. Esses nomes no R são reservados, isto é, você não pode chamar nenhum objeto de TRUE ou FALSE. TRUE &lt;- 1 ## Error in TRUE &lt;- 1 : invalid (do_set) left-hand side to assignment Checando a classe desses valores, vemos que são lógicos7. Eles são os únicos possíveis valores dessa classe. class(TRUE) ## [1] &quot;logical&quot; class(FALSE) ## [1] &quot;logical&quot; Agora que conhecemos o TRUE e FALSE, podemos explorar os teste lógicos. Começando pelo mais simples: vamos testar se um valor é igual ao outro. Para isso, usamos o operador ==. # Testes com resultado verdadeiro 1 == 1 ## [1] TRUE &quot;a&quot; == &quot;a&quot; ## [1] TRUE # Testes com resultado falso 1 == 2 ## [1] FALSE &quot;a&quot; == &quot;b&quot; ## [1] FALSE Também podemos testar se dois valores são diferentes. Para isso, usamos o operador !=. # Testes com resultado falso 1 != 1 ## [1] FALSE &quot;a&quot; != &quot;a&quot; ## [1] FALSE # Testes com resultado verdadeiro 1 != 2 ## [1] TRUE &quot;a&quot; != &quot;b&quot; ## [1] TRUE Para comparar se um valor é maior que outro, temos à disposição 4 operadores: # Maior 3 &gt; 3 ## [1] FALSE 3 &gt; 2 ## [1] TRUE # Maior ou igual 3 &gt; 4 ## [1] FALSE 3 &gt;= 3 ## [1] TRUE # Menor 3 &lt; 3 ## [1] FALSE 3 &lt; 4 ## [1] TRUE # Menor ou igual 3 &lt; 2 ## [1] FALSE 3 &lt;= 3 ## [1] TRUE Um outro operador muito útil é o %in%. Com ele, podemos verificar se um valor está dentro de um conjunto de valores (vetor). 3 %in% c(1, 2, 3) ## [1] TRUE &quot;a&quot; %in% c(&quot;b&quot;, &quot;c&quot;) ## [1] FALSE Nós começamos essa seção dizendo que usaremos testes lógicos o tempo todo. O motivo para isso é que eles fazem parte de uma operação muito comum na manipulação de base de dados: os filtros. No Excel, por exemplo, quando você filtra uma planilha, o que está sendo feito por trás é um teste lógico. Falamos anteriormente que cada coluna das nossas bases de dados será representada dentro do R como um vetor. O comportamento que explica a importância dos testes lógicos na hora de filtrar uma base está ilustrado abaixo: minha_coluna &lt;- c(1, 3, 0, 10, -1, 5, 20) minha_coluna &gt; 3 ## [1] FALSE FALSE FALSE TRUE FALSE TRUE TRUE minha_coluna[minha_coluna &gt; 3] ## [1] 10 5 20 Muitas coisas aconteceram aqui, vamos por partes. Primeiro, na operação minha_coluna &gt; 3 o R fez um excelente uso do comportamento de reciclagem. No fundo, o que ele fez foi transformar (reciclar) o valor 3 no vetor c(3, 3, 3, 3, 3, 3, 3) e testar se c(1, 3, 0, 10, -1, 5, 20) &gt; c(3, 3, 3, 3, 3, 3, 3). Como os operadores lógicos também são vetorizados (fazem operações elemento a elemento), os testes realizados foram 1 &gt; 3, 3 &gt; 3, 0 &gt; 3, 10 &gt; 3, -1 &gt; 3, 5 &gt; 3 e, finalmente, 20 &gt; 3. Cada um desses testes tem o seu próprio resultado. Por isso a saída de minha_coluna &gt; 3 é um vetor de verdadeiros e falsos, respectivos a cada um desses 7 testes. A segunda operação traz a grande novidade aqui: podemos usar os valores TRUE e FALSE para selecionar elementos de um vetor! A regra é muito simples: retornar as posições que receberem TRUE, não retornar as posições que receberem FALSE. Portanto, a segunda operação é equivalente a: minha_coluna[c(FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE)] ## [1] 10 5 20 O vetor lógico filtra o vetor minha_coluna, retornando apenas os valores maiores que 3, já que foi esse o teste lógico que fizemos. Essa é a mágica que acontece por trás de filtros no R. Na prática, não precisaremos usar colchetes, não lembraremos da reciclagem e nem veremos a cara dos TRUE e FALSE. Mas conhecer esse processo é muito importante, principalmente para encontrar problemas de código ou de base. 3.8 Valores especiais Vimos anteriormente que se você tentar acessar uma posição que não existe dentro de um vetor, ele retorna um valor estranho. vetor &lt;- c(1, 2, 3) vetor[4] ## [1] NA Esse valor, o NA, é tratado de forma especial no R. Ele representa a ausência de informação, isto é, a informação existe, mas nós (e o R) não sabemos qual é. O NA para o R nada mais é do que o valor faltante ou omisso da Estatística. O famoso missing. Geralmente, quando temos uma base com valores faltando, como a idade para alguns indivíduos da nossa amostra, não significa que a idade deles não existe. Significa apenas que não temos essa informação. Esse conceito é muito importante para entender o resultado da expressão abaixo. 5 == NA ## [1] NA Em um primeiro momento, poderíamos esperar que o resultado fosse TRUE. Mas, sabendo o significado por trás do NA — um valor desconhecido —, a verdadeira pergunta que estamos fazendo é: 5 é igual a um valor que existe, mas que não sei qual é? É como se eu perguntasse se eu tenho 5 moedas na mão, mas lhe mostrasse a mão fechada. A resposta para isso é não sei ou, dentro do R, NA. Um outro exemplo: idade_ana &lt;- 30 idade_beto &lt;- NA idade_carla &lt;- NA idade_ana == idade_beto ## [1] NA idade_beto == idade_carla ## [1] NA Eu posso saber a idade da Ana, mas se eu não souber a idade do Beto, não sei se os dois tem a mesma idade. Por isso, NA. Da mesma forma, se não sei nem a idade do Beto nem da Carla, também não tenho como saber se os dois têm a mesma idade. Outra vez NA. Mas e quando queremos saber se um valor é NA ou não? Para fazer esse teste, temos que rodar is.na(valor-ou-objeto). is.na(NA) ## [1] TRUE is.na(idade_ana) ## [1] FALSE is.na(idade_beto) ## [1] TRUE Repare que essa função também é vetorizada. is.na(c(idade_ana, idade_beto, idade_carla)) ## [1] FALSE TRUE TRUE Assim como o NA, existem outros valores especiais muito comuns no R. O NaN (not a number) representa indefinições matemáticas. 0/0 ## [1] NaN log(-1) ## Warning in log(-1): NaNs produced ## [1] NaN O Inf (infinito) representa um número muito grande (que o computador não consegue representar) ou um limite matemático. # O computador não consegue representar um número tão grande. # O número é então &quot;&quot;&quot;arredondado&quot;&quot;&quot; para infinito. 10^310 ## [1] Inf # Limite matemático. 1 / 0 ## [1] Inf # O &quot;menos infinito&quot; também existe. -1 / 0 ## [1] -Inf O NULL (nulo) representa a ausência de um objeto. Ele não tem significado prático para a análise dados. Está mais em sintonia com comportamentos de lógica de programação. Muitas vezes vamos definir um objeto como nulo para dizer ao R que não queremos dar um valor para ele. Muito utilizado em funções (ver Seção 3.11). Da mesma forma que utilizados is.na() para testar se um objeto é NA, utilizamos is.nan(), is.infinite() ou is.null() para testar se um objeto é NaN, infinito ou nulo. nao_sou_um_numero &lt;- NaN objeto_infinito &lt;- Inf objeto_nulo &lt;- NULL is.nan(nao_sou_um_numero) ## [1] TRUE is.infinite(objeto_infinito) ## [1] TRUE is.null(objeto_nulo) ## [1] TRUE 3.9 Listas Chegamos ao último tópico antes de voltarmos aos data frames: as listas. Listas são objetos muito importantes dentro do R. Primeiro porque todo data frame é uma lista. Segundo porque elas são bem parecidas com vetores, mas com uma diferença essencial: você pode misturar diferentes classes de objetos dentro dela. Para criar uma lista, rodamos list(valor1, valor2, valor3). list(1, &quot;a&quot;, TRUE) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] TRUE Veja que não houve coerção. Ainda temos um valor número, um texto e um valor lógico dentro da lista. O subsetting de listas é um pouco diferente do que o de vetores. Isso porque cada elemento de uma lista também é uma lista. Veja o que acontece se tentarmos usar [] para pegar um elemento de uma lista. lista &lt;- list(1, &quot;a&quot;, TRUE) lista[1] ## [[1]] ## [1] 1 class(lista[1]) ## [1] &quot;list&quot; O R nos retorna uma lista com apenas aquele elemento. Se quisermos o elemento de fato dentro de cada posição, precisamos usar dois colchetes: lista[[1]] ## [1] 1 class(lista[[1]]) ## [1] &quot;numeric&quot; Cada elemento de uma lista ser uma lista é importante pois isso nos permite colocar vetores de tamanhos diferentes em cada posição. Isso faz das listas uma estrutura bem flexível para guardar dados. lista &lt;- list(c(1, 2, 3), &quot;a&quot;, c(TRUE, TRUE, FALSE, FALSE)) lista ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] TRUE TRUE FALSE FALSE lista[1] ## [[1]] ## [1] 1 2 3 lista[2] ## [[1]] ## [1] &quot;a&quot; lista[3] ## [[1]] ## [1] TRUE TRUE FALSE FALSE É muito comum darmos nomes para cada posição de uma lista. dados_cliente &lt;- list(cliente = &quot;Ana Silva&quot;, idade = 25, estado_civil = NA) dados_cliente ## $cliente ## [1] &quot;Ana Silva&quot; ## ## $idade ## [1] 25 ## ## $estado_civil ## [1] NA Agora, dentro da lista, o valor Ana Silva, por exemplo, está sendo atribuído ao nome cliente. Esse nome só existirá dentro da lista. Um detalhe importante: os iguais utilizados nas atribuições dos nomes dentro da lista não podem ser substituídos por &lt;-. Quando as posições de uma lista tem nome, podemos acessar seus valores diretamente utilizando o operador $. dados_cliente$cliente ## [1] &quot;Ana Silva&quot; dados_cliente$idade ## [1] 25 dados_cliente$estado_civil ## [1] NA Repare que o R devolve o valor dentro de cada posição, e não uma lista. dados_cliente[1] ## $cliente ## [1] &quot;Ana Silva&quot; dados_cliente$cliente ## [1] &quot;Ana Silva&quot; class(dados_cliente[1]) ## [1] &quot;list&quot; class(dados_cliente$cliente) ## [1] &quot;character&quot; Isto implica que, nesse exemplo, dados_cliente$cliente é equivalente a dados_cliente[[1]]. Conforme ficamos mais e mais proficientes na linguagem R, as listas passam a ficar cada vez mais frequentes. Voltaremos a falar delas diversas vezes nos próximos capítulos, em especial no Capítulo 7. 3.10 Mais sobre data frames Chegou a hora de usarmos tudo o que aprendemos na seção anterior para exploramos ao máximo o nosso objeto favorito: o data frame. Na seção anterior, nós dissemos que data frames são listas. Isso é importante pois todas as propriedades de uma lista valem para um data frame. A melhor forma de entender essa equivalência é ver um data frame representado como uma lista. as.list(mtcars) ## $mpg ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 ## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 ## [31] 15.0 21.4 ## ## $cyl ## [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 ## ## $disp ## [1] 160.0 160.0 108.0 258.0 360.0 225.0 360.0 146.7 140.8 167.6 167.6 275.8 ## [13] 275.8 275.8 472.0 460.0 440.0 78.7 75.7 71.1 120.1 318.0 304.0 350.0 ## [25] 400.0 79.0 120.3 95.1 351.0 145.0 301.0 121.0 ## ## $hp ## [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 ## [20] 65 97 150 150 245 175 66 91 113 264 175 335 109 ## ## $drat ## [1] 3.90 3.90 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 3.92 3.07 3.07 3.07 2.93 ## [16] 3.00 3.23 4.08 4.93 4.22 3.70 2.76 3.15 3.73 3.08 4.08 4.43 3.77 4.22 3.62 ## [31] 3.54 4.11 ## ## $wt ## [1] 2.620 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 3.440 4.070 ## [13] 3.730 3.780 5.250 5.424 5.345 2.200 1.615 1.835 2.465 3.520 3.435 3.840 ## [25] 3.845 1.935 2.140 1.513 3.170 2.770 3.570 2.780 ## ## $qsec ## [1] 16.46 17.02 18.61 19.44 17.02 20.22 15.84 20.00 22.90 18.30 18.90 17.40 ## [13] 17.60 18.00 17.98 17.82 17.42 19.47 18.52 19.90 20.01 16.87 17.30 15.41 ## [25] 17.05 18.90 16.70 16.90 14.50 15.50 14.60 18.60 ## ## $vs ## [1] 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1 ## ## $am ## [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 ## ## $gear ## [1] 4 4 4 3 3 3 3 4 4 4 4 3 3 3 3 3 3 4 4 4 3 3 3 3 3 4 5 5 5 5 5 4 ## ## $carb ## [1] 4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 6 8 2 O código acima nos permite ver o data frame mtcars representado como uma lista. Veja que cada coluna da base se transforma em um elemento da lista. E o nome de cada coluna vira o nome de cada posição. Isso é interessante, pois podemos usar nos data frames as mesmas operações que aprendemos para listas. Por exemplo, podemos usar o operador $ para acessar cada elemento da lista, isto é, cada coluna do data frame. mtcars$mpg ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 ## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 ## [31] 15.0 21.4 E assim como cada elemento de uma lista também é uma lista, cada elemento (coluna) de um data frame também é um *data frame. mtcars[1] ## mpg ## Mazda RX4 21.0 ## Mazda RX4 Wag 21.0 ## Datsun 710 22.8 ## Hornet 4 Drive 21.4 ## Hornet Sportabout 18.7 ## Valiant 18.1 ## Duster 360 14.3 ## Merc 240D 24.4 ## Merc 230 22.8 ## Merc 280 19.2 ## Merc 280C 17.8 ## Merc 450SE 16.4 ## Merc 450SL 17.3 ## Merc 450SLC 15.2 ## Cadillac Fleetwood 10.4 ## Lincoln Continental 10.4 ## Chrysler Imperial 14.7 ## Fiat 128 32.4 ## Honda Civic 30.4 ## Toyota Corolla 33.9 ## Toyota Corona 21.5 ## Dodge Challenger 15.5 ## AMC Javelin 15.2 ## Camaro Z28 13.3 ## Pontiac Firebird 19.2 ## Fiat X1-9 27.3 ## Porsche 914-2 26.0 ## Lotus Europa 30.4 ## Ford Pantera L 15.8 ## Ferrari Dino 19.7 ## Maserati Bora 15.0 ## Volvo 142E 21.4 class(mtcars[1]) ## [1] &quot;data.frame&quot; Mas se data frames são listas, por que existe a classe data frame? Na verdade, data frames são um tipo especial de listas, que têm as seguintes propriedades: Todos os seus elementos (colunas) precisam ter o mesmo comprimento (número de linhas). Todos os seus elementos (colunas) precisam ser nomeados. Data frames têm 2 dimensões. As propriedades (1) e (2) se devem ao formato das bases de dados. Elas são retangulares8 — observamos as mesmas variáveis (colunas) para todas as unidades amostrais (linhas)9 —, e precisam ter algum nome especificando as colunas. Da mesma forma que podemos ver um data frame como uma lista, também podemos fazer o inverso. dados_cliente &lt;- list( cliente = c(&quot;Ana Silva&quot;, &quot;Beto Pereira&quot;, &quot;Carla Souza&quot;), idade = c(25, 30, 23), estado_civil = c(NA, &quot;Solteiro&quot;, &quot;Casada&quot;) ) dados_cliente ## $cliente ## [1] &quot;Ana Silva&quot; &quot;Beto Pereira&quot; &quot;Carla Souza&quot; ## ## $idade ## [1] 25 30 23 ## ## $estado_civil ## [1] NA &quot;Solteiro&quot; &quot;Casada&quot; as.data.frame(dados_cliente) ## cliente idade estado_civil ## 1 Ana Silva 25 &lt;NA&gt; ## 2 Beto Pereira 30 Solteiro ## 3 Carla Souza 23 Casada Quando tivermos valores faltantes na nossa base (células vazias no Excel), eles serão representados por NA nos data frames. Observe que não conseguimos transformar uma lista em data frame se os elementos da lista não tiverem o mesmo comprimento. dados_cliente &lt;- list( cliente = c(&quot;Ana Silva&quot;, &quot;Beto Pereira&quot;, &quot;Carla Souza&quot;), idade = c(25, 30), estado_civil = c(NA, &quot;Solteiro&quot;, &quot;Casada&quot;) ) as.data.frame(dados_cliente) ## Error in (function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE, : arguments imply differing number of rows: 3, 2 Transformar uma lista não nomeada em data frame é possível, mas o R cria nomes nada agradáveis para as colunas. dados_cliente &lt;- list( c(&quot;Ana Silva&quot;, &quot;Beto Pereira&quot;, &quot;Carla Souza&quot;), c(25, 30, 23), c(NA, &quot;Solteiro&quot;, &quot;Casada&quot;) ) as.data.frame(dados_cliente) ## c..Ana.Silva....Beto.Pereira....Carla.Souza.. c.25..30..23. ## 1 Ana Silva 25 ## 2 Beto Pereira 30 ## 3 Carla Souza 23 ## c.NA...Solteiro....Casada.. ## 1 &lt;NA&gt; ## 2 Solteiro ## 3 Casada A propriedade (3) é atribuída aos data frames para que possamos aproveitar melhor dessa estrutura retangular dentro do R. Na prática, essas duas dimensões representam nada mais que as linhas e as colunas da base. Essa é a maior diferença entre uma lista e um data frame. class(mtcars) ## [1] &quot;data.frame&quot; dim(mtcars) ## [1] 32 11 O resultado do código dim(mtcars) nos dá as seguintes informações: O data frame mtcars tem duas dimensões (como todo data frame). A primeira dimensão tem comprimento 32 e a segunda dimensão tem comprimento 11. Em outras palavras: a base mtcars tem 32 linhas e 11 colunas. Veja a seguir que listas não têm dimensão. mtcars_como_lista &lt;- as.list(mtcars) class(mtcars_como_lista) ## [1] &quot;list&quot; dim(mtcars_como_lista) ## NULL Ter duas dimensões significa que devemos usar dois índices para acessar (fazer subsetting) dos valores de um data frame. Para isso, ainda usamos o colchete, mas agora com dois argumentos: [linha, coluna]. mtcars[2, 3] ## [1] 160 O código acima está nos devolvendo o valor presente na segunda linha da terceira coluna da base mtcars. Também podemos pegar todos as linhas de uma coluna ou todas as colunas de uma linha deixando um dos argumentos vazio: # Todas as linhas da coluna 1 mtcars[,1] ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 ## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 ## [31] 15.0 21.4 # Todas as colunas da linha 1 mtcars[1,] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.62 16.46 0 1 4 4 Por fim, lembrando que dento de cada coluna temos um vetor, podemos usar os testes lógicos para filtrar as linhas do nosso data frame conforme alguma regra. mtcars$cyl == 4 ## [1] FALSE FALSE TRUE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE FALSE FALSE FALSE ## [25] FALSE TRUE TRUE TRUE FALSE FALSE FALSE TRUE mtcars[mtcars$cyl == 4, ] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 O código mtcars$cyl == 4 nos diz em quais linhas estão os carros com 4 cilindros. Quando usamos o vetor de TRUE e FALSE resultante dentro do subsetting das linhas em mtcars[mtcars$cyl == 4, ], o R nos devolve todos as colunas dos carros com 4 cilindros. A regra é simples: linha com TRUE é retornada, linha com FALSE não. Encerramos aqui a nossa primeira conversa sobre data frames para falar de outra estrutura muito importante dentro do R: as funções. 3.11 Funções Enquanto objetos são nomes que guardam valores, funções no R são nomes que guardam um código de R. A ideia é muito simples: sempre que você rodar uma função, o código que ela guarda será executado e um resultado nos será devolvido. Funções são tão comuns (provavelmente você já usou funções no Excel) e intuitivas, que mesmo sem definir o que elas são, nós já utilizamos funções nas seções anteriores: a função c() foi utilizada para criar vetores; a função class() foi utilizada para descobrir a classe de um objeto; a classe de funções is.na(), is.nan(), is.infinite() e is.null foram utilizadas para testar se um valor é NA, NaN, infinito ou NULL, respectivamente. Diferentemente dos objetos, as funções podem receber argumentos. Argumentos são os valores que colocamos dentro dos parênteses e que as funções precisam para funcionar (calcular algum resultado). Por exemplo, a função c() precisa saber quais são os valores que formarão o vetor que ela irá criar. c(1, 3, 5) ## [1] 1 3 5 Nesse caso, os valores 1, 3 e 5 são os argumentos da função c(). Os argumentos de uma função são sempre separados por vírgulas. Também podemos usar argumentos para modificar o comportamento de uma função. Por exemplo, vejamos a função mean(). mean(1, 3) ## [1] 1 Como você deve ter percebido, essa função retorna a média de seus argumentos. Também podemos passar um vetor como argumento, e ela retornará a média dos elementos do vetor. mean(c(1, 3)) ## [1] 2 Isso é útil pois podemos passar a coluna de um data frame como argumento para saber a média dessa coluna: # A coluna de um data frame é um vetor: mtcars$mpg ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 ## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 ## [31] 15.0 21.4 # Podemos passar esse vetor para a função mean() mean(mtcars$mpg) ## [1] 20.09062 Agora, o que acontece se algum elemento do vetor for NA? mean(c(1, 3, NA)) ## [1] NA Como a função não sabe o valor do terceiro elemento do vetor, ela não sabe qual é a média desses 3 elementos e, então, devolve NA. Como é muito comum termos NA nas nossas bases de dados, é muito comum tentarmos calcular a média de uma coluna que tem NA e recebermos NA como resposta. Na grande maioria dos casos, queremos saber a média de uma coluna apesar dos NAs. Isto é, queremos retirar os NAs e então calcular a média com os valores que conhecemos. Para isso, podemos utilizar o argumento na.rm = TRUE da função mean(). mean(c(1, 3, NA), na.rm = TRUE) ## [1] 2 Esse argumento diz à função para remover os NAs antes de calcular a média. Assim, a média calculada é: (1 + 3)/2. Claro que cada função tem os seus próprios argumentos e nem toda função terá o argumento na.rm=. Para saber quais são e como usar os argumentos de uma função, basta acessar a sua documentação: help(mean) Os argumentos das funções também têm nomes, que podemos ou não usar na hora de usar uma função. Veja por exemplo a função seq(). seq(from = 4, to = 10, by = 2) ## [1] 4 6 8 10 Entre outros argumentos, ela possui os argumentos from=, to= e by=. O que ela faz é criar uma sequência (vetor) de by em by que começa em from e termina em to. No exemplo, criamos uma função de 2 em 2 que começa em 4 e termina em 10. Também poderíamos usar a mesma função sem colocar o nome dos argumentos: seq(0, 10, 2) ## [1] 0 2 4 6 8 10 Para utilizar a função sem escrever o nome dos argumentos, você precisa colocar os valores na ordem em que os argumentos aparecem. E se você olhar a documentação da função seq(), fazendo help(seq), verá que a ordem dos argumentos é justamente from=, to= e by=. Escrevendo o nome dos argumentos, não há problema em alterar a ordem dos argumentos: seq(by = 2, to = 10, from = 4) ## [1] 4 6 8 10 Mas se especificar os argumentos, a ordem importa. Veja que o resultado será diferente. seq(2, 10, 4) ## [1] 2 6 10 A seguir, apresentamos algumas funções nativas do R úteis para trabalhar com data frames : head() - Mostra as primeiras 6 linhas. tail() - Mostra as últimas 6 linhas. dim() - Número de linhas e de colunas. names() - Os nomes das colunas (variáveis). str() - Estrutura do data frame. Mostra, entre outras coisas, as classes de cada coluna. cbind() - Acopla duas tabelas lado a lado. rbind() - Empilha duas tabelas. Além de usar funções já prontas, você pode criar a sua própria função. A sintaxe é a seguinte: nome_da_funcao &lt;- function(argumento_1, argumento_2) { # Código que a função irá executar } Repare que function é um nome reservado no R, isto é, você não pode criar um objeto com esse nome. Um exemplo: vamos criar uma função que soma dois números. minha_soma &lt;- function(x, y) { soma &lt;- x + y soma # resultado retornado } Essa função tem os seguintes componentes: minha_soma: nome da função x e y: argumentos da função soma &lt;- x + y: operação que a função executa soma: valor retornado pela função Após rodarmos o código de criar a função, podemos utilizá-la como qualquer outra função do R. minha_soma(2, 2) ## [1] 4 O objeto soma só existe dentro da função, isto é, além de ele não ser colocado no seu environment, ele só existirá na memória (RAM) enquanto o R estiver executando a função. Depois disso, ele será apagado. O mesmo vale para os argumentos x e y. O valor retornado pela função representa o resultado que receberemos ao utilizá-la. Por padrão, a função retornará sempre a última linha de código que existir dentro dela. No nosso exemplo, a função retorna o valor contido no objeto soma, pois é isso que fazemos na última linha de código da função. Repare que se atribuirmos o resultado a um objeto, ele não será mostrado no console: resultado &lt;- minha_soma(3, 3) # Para ver o resultado, rodamos o objeto `resultado` resultado ## [1] 6 Agora, o que acontece se a última linha da função não devolver um objeto? Veja: minha_nova_soma &lt;- function(x, y) { soma &lt;- x + y } A função minha_nova_soma() apenas cria o objeto soma, sem retorná-lo como na função minha_soma(). Se utilizarmos essa nova função, nenhum valor é devolvido no console: minha_nova_soma(1, 1) No entanto, a última linha da função agora é a atribuição soma &lt;- x + y e esse será o “resultado retornado”. Assim, podemos visualizar o resultado da função fazendo: resultado &lt;- minha_nova_soma(1, 1) resultado ## [1] 2 É como se, por trás das cortinas, o R estivesse fazendo resultado &lt;- soma &lt;- x + y, mas apenas o objeto resultado continua existindo, já que os objetos soma, xe y são descartados após a função ser executada. Claro que, na prática, é sempre bom criarmos funções que retornem na tela os seus resultados, para evitar esse passo a mais se quisermos apenas ver o resultado no console. Assim, a função minha_soma() costuma ser preferível com relação à função minha_nova_soma(). 3.12 Controle de Fluxo Como toda boa linguagem de programação, o R possui estruturas de if’s, else’s, for’s, while’s etc. Esses controles de fluxo são importantes na hora de programar. 3.12.1 if e else O seguinte trecho de código só será executado se o objeto x for igual a 1. Repare que a condição de igualdade é representada por dois iguais ==. x &lt;- 2 if(x == 1) { Sys.time() # Devolve a data/hora no momento da execução. } x &lt;- 1 if(x == 1) { Sys.time() } ## [1] &quot;2020-05-07 12:27:58 -03&quot; O R só vai executar o que está na expressão dentro das chaves {} se o que estiver dentro dos parênteses () retornar TRUE. A sintaxe com o else e o if else é if(x &lt; 0) { sinal &lt;- &quot;negativo&quot; } else if(x == 0) { sinal &lt;- &quot;neutro&quot; } else if(x &gt; 0) { sinal &lt;- &quot;positivo&quot; } sinal ## [1] &quot;positivo&quot; Diferença entre SQL e R nas comparações lógicas Igualdade: no SQL é só um sinal de igual: &lt;2 = 1. No R são dois: 2 == 1. Diferença: teste de diferente no R é != em vez de de &lt;&gt;. Negação: em vez de usar a palavra “not” igual ao SQL, usamos !. Por exemplo, “entidade_id not in (‘100515’)” fica “!entidade_id %in% c(‘100515’)”. 3.12.2 for Vamos usar o for para somar todos os elementos de um vetor. x &lt;- 1:10 # Cria um vetor com a sequência 1, 2, ..., 10. soma &lt;- 0 for(i in 1:10) { soma &lt;- soma + x[i] } soma ## [1] 55 De forma equivalente, podemos usar diretamente a função sum(). sum(x) ## [1] 55 Agora, vamos imprimir na tela o resultado da divisão de cada elemento de um vetor por dois. Para isso, utilizaremos a função print(). vetor &lt;- 30:35 indices &lt;- seq_along(vetor) # cria o vetor de índices segundo o tamanho # do objeto vetor. for(i in indices) { print(vetor[1:i] / 2) } ## [1] 15 ## [1] 15.0 15.5 ## [1] 15.0 15.5 16.0 ## [1] 15.0 15.5 16.0 16.5 ## [1] 15.0 15.5 16.0 16.5 17.0 ## [1] 15.0 15.5 16.0 16.5 17.0 17.5 No trecho de código acima, preste atenção no resultado individual de cada uma das operações para entender como o R funciona. 3.12.3 while O código a seguir irá imprimir na tela o valor de i enquanto este objeto for menor que 3. No momento em que a condição dentro das chaves {} não for mais respeitada, o processo será interrompido. i &lt;- 1 while(i &lt; 3){ print(i) i = i + 1 } ## [1] 1 ## [1] 2 É importante que o valor de i seja atualizado em cada interação, caso contrário a função entrará em um loop infinito. Vamos usar o while para encontrar uma aproximação da solução de \\(\\sqrt{x} = x\\). Este método é conhecido como Interação do ponto fixo e pode ser usado no cálculo aproximado de soluções de equações de uma variável real. x &lt;- 4 erro &lt;- 100 while (abs(erro) &gt; 0.1) { erro &lt;- (sqrt(x)) - x x &lt;- sqrt(x) } print(x) ## [1] 1.090508 Quando a diferença entre \\(\\sqrt{x}\\) e \\(x\\) ficou menor que 0.1, o loop foi interrompido. Vemos que solução aproximada da equação \\(\\sqrt{x} = x\\) dada pelo algoritmo não difere muito da solução real \\(x=1\\). Para finalizar, listamos na tabela abaixo os principais operadores lógicos. Operador Descrição x &lt; y x menor que y? x &lt;= y x menor ou igual a y? x &gt; y x maior que y? x &gt;= y x maior ou igual a y? x == y x igual a y? x != y x diferente de y? !x Negativa de x x | y x ou y são verdadeiros? x &amp; y x e y são verdadeiros? xor(x, y) x ou y são verdadeiros (apenas um deles)? 3.13 Outros tópicos 3.13.1 Matrizes Matrizes são vetores com duas dimensões (e por isso só possuem elementos de uma mesma classe). m &lt;- matrix(1:6, nrow = 2, ncol = 3) m ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 dim(m) # funçăo dim() retorna a dimensăo do objeto. ## [1] 2 3 Repare que os números de 1 a 6 foram dispostos na matriz coluna por coluna (column-wise), ou seja, preenchendo de cima para baixo e depois da esquerda para a direita. Operações úteis m[3, ] # seleciona a terceira linha m[ , 2] # seleciona a segunda coluna m[1, 2] # seleciona o primeiro elemento da segunda coluna t(m) # matriz transposta m %*% n # multiplicação matricial solve(m) # matriz inversa de m 3.13.2 Fatores Fatores podem ser vistos como vetores de inteiros que possuem rótulos (levels). sexo &lt;- c(&quot;M&quot;, &quot;H&quot;, &quot;H&quot;, &quot;H&quot;, &quot;M&quot;, &quot;M&quot;, &quot;H&quot;) fator &lt;- as.factor(sexo) fator ## [1] M H H H M M H ## Levels: H M as.numeric(fator) ## [1] 2 1 1 1 2 2 1 Eles são úteis para representar uma variável categórica (nominal e ordinal). Na modelagem, eles serão tratados de maneira especial em funções como lm() e glm(). A função levels() retorna os rótulos do fator: levels(fator) ## [1] &quot;H&quot; &quot;M&quot; A ordem das categorias de um fator pode importar. Como exemplo, temos as caselas de referência de modelos estatísticos e a ordem das barras de um gráfico. Para ajudar nesta tarefa, consulte o pacote forcats. Um erro comum e desastroso. Quando um vetor de números está como factor, ao tentar transformá-lo em numeric, você receberá um vetor de inteiros que não tem nada a ver com os valores originais! numeros &lt;- factor(c(&quot;10&quot;, &quot;55&quot;, &quot;55&quot;, &quot;12&quot;, &quot;10&quot;, &quot;-5&quot;, &quot;-90&quot;)) as.numeric(numeros) ## [1] 3 5 5 4 3 1 2 #Por essa eu năo esperava! Para evitar isso, use as.character() antes de transformar para número. as.numeric(as.character(numeros)) ## [1] 10 55 55 12 10 -5 -90 # Agora está OK! 3.13.3 Fórmulas Fórmulas são objetos do tipo y ~ x. Em geral, elas representam associações entre objetos, como em um modelo de regressão. As funções as usam de diversas maneiras, mas o exemplo mais emblemático vem da modelagem estatística. formula &lt;- y ~ x1 + x2 class(formula) ## [1] &quot;formula&quot; A função lm() é a que ajusta um modelo linear no R, e lm(y ~ x) lê-se “regressão linear de y explicada por x”. minha_formula &lt;- Sepal.Width ~ Petal.Length + Petal.Width class(minha_formula) ## [1] &quot;formula&quot; lm(minha_formula, data = iris) ## ## Call: ## lm(formula = minha_formula, data = iris) ## ## Coefficients: ## (Intercept) Petal.Length Petal.Width ## 3.5870 -0.2571 0.3640 No caso específico dos modelos lineares, são nas fórmulas que conseguimos descrever as variáveis explicativas e suas interações. A fórmula y ~ x1 * x2 significa “y regredido por x1, x2 e a interação entre x1 e x2”. Fórmulas aparecem frequentemente em tarefas de modelagem. Demais usos de fórmulas aparecerão em outras funções, como as do pacote ggplot2, com outros significados, e a documentação nos dirá como usá-las. 3.13.4 Gráficos (base) O R já vem com funções básicas que fazem gráficos estatísticos de todas as naturezas. Vantagens: são rápidas e simples. Desvantagens: são feias e difíceis para gerar gráficos complexos. Nesta seção, mostraremos como construir alguns tipos de gráficos usando as funções base do R, mas o nosso foco em visualização de dados está nas funções do pacote ggplot2. 3.13.4.1 Gráfico de dispersão Para construir um gráfico de dispersão, utilizamos a função plot(). Seus principais parâmetros são: x, y - Vetores para representarem os eixos x e y. type - Tipo de gráfico. Pode ser pontos, linhas, escada, entre outros. Para mais detalhes sobre os argumentos, ver help(plot). Outras formas de utilizar a função plot() Além de gerar gráficos de dispersão, tentar chamar a função plot(objeto_diferentao) para qualquer tipo de objeto do R geralmente gera um gráfico interessante! Sempre tente fazer isso, a menos que seu objeto seja um data.frame com milhares de colunas! N &lt;- 100 x &lt;- 1:N y &lt;- 5 + 2 * x + rnorm(N, sd = 30) plot(x, y) O parâmetro type = \"l\" indica que queremos que os pontos sejam interligados por linhas. plot(x, y, type = &quot;l&quot;) 3.13.4.2 Histograma Para construir histogramas, utilizamos a função hist(). Os principais parâmetros são: x - O vetor numérico para o qual o histograma será construído. breaks - O número (aproximado) de retângulos. hist(rnorm(1000)) hist(rnorm(1000), breaks = 6) 3.13.4.3 Boxplot Para construir histogramas, utilizamos a função boxplot(). Os principais parâmetros são: x - O vetor numérico para o qual o boxplot será construído. boxplot(InsectSprays$count, col = &quot;lightgray&quot;) Observe que o argumento col= muda a cor da caixa do boxplot. Para mapear duas variáveis ao gráfico, utilizamos um objeto da classe formula e o argumento data=. boxplot(count ~ spray, data = InsectSprays, col = &quot;lightgray&quot;) 3.13.4.4 Gráfico de barras Para construir gráficos de barras, precisamos combinar as funções table() e barplot(). No gráfico abaixo, primeiro criamos uma tabela de frequências com a função table() e, em seguida, construímos o gráfico com a função barplot(). A função data() carrega bases de dados de pacotes instalados. Veja help(data) para mais detalhes. data(diamonds, package = &quot;ggplot2&quot;) tabela &lt;- table(diamonds$color) tabela ## ## D E F G H I J ## 6775 9797 9542 11292 8304 5422 2808 barplot(tabela) Também podemos mapear duas variáveis a um gráfico de barras utilizando tabelas de dupla entrada. VADeaths ## Rural Male Rural Female Urban Male Urban Female ## 50-54 11.7 8.7 15.4 8.4 ## 55-59 18.1 11.7 24.3 13.6 ## 60-64 26.9 20.3 37.0 19.3 ## 65-69 41.0 30.9 54.6 35.1 ## 70-74 66.0 54.3 71.1 50.0 barplot(VADeaths) 3.14 Exercícios Sugestão: resolva os exercícios em arquivo R Markdown, aproveitando para fazer anotações e registrar suas dúvidas ao longo do caminho. 1. Calcule o número de ouro no R. Dica: o número de ouro é dado pela expressão \\(\\frac{1 + \\sqrt{5}}{2}\\). 2. Qual o resultado da divisão de 1 por 0 no R? E de -1 por 0? 3. Quais as diferenças entre NaN, NULL, NA e Inf? Digite expressões que retornem cada um desses resultados. 4. Sem rodar o código, calcule o que a expressão 5 + 3 * 10 %/% 3 == 15 vai resultar no R. Em seguida, apenas utilizando parênteses, faço a expressão retornar o valore contrário (i.e., se originariamente for TRUE, faça retornar FALSE). 5. Por que o código abaixo retorna erro? Arrume o código para retornar o valor TRUE. x &lt;- 4 if(x = 4) { TRUE } 6. Usando if e else, escreva um código que retorne a string \"número\" caso o valor seja da classe numeric ou integer; a string \"palavra\" caso o valor seja da classe character; e NA caso contrário. 7. Use o for para retornar o menor valor do seguinte vetor: vetor &lt;- c(4, 2, 1, 5, 3). Modifique o seu código para que ele funcione com qualquer vetor. 8. Usando apenas for e a função length(), construa uma função que calcule a média de um vetor número qualquer. Construa uma condição para a função retornar NULL caso o vetor não seja numérico. 9. Rode help(runif) para descobrir o que a função runif() faz. Em seguida, use-a para escrever uma função que retorne um número aleatório inteiro entre 0 e 10 (0 e 10 inclusive). 10. Rode help(sample) para descobrir o que a função sample() faz. Em seguida, use-a para escrever uma função que escolha uma linha aleatoriamente de uma matriz e devolva os seus valores. Essa ideia é um dos princípios por trás do tidyverse.↩ Bases de dados presentes em pacotes também têm documentação, e geralmente é possível encontrar o significado de cada variável nela. Por exemplo, help(mtcars).↩ Ou com um ponto.↩ Você pode construir um data frame vazio, com 0 linha e 0 coluna. No entanto, a estrutura de linhas e colunas estará presente.↩ A primeira “coluna” representa apenas o nome das linhas (modelo do carro), não é uma coluna da base. Repare que ela não possui um nome, como as outras. Essa estrutura de nome de linha é própria de data frames no R. Se exportássemos essa base para o Excel, por exemplo, essa coluna não apareceria.↩ Essa posição é dada pela ordem em que os elementos foram colocados no momento em que o vetor foi criado.↩ Também conhecidos como valores binários ou booleanos↩ Também existem bases não retangulares, como dados de imagens por exemplos, mas não trataremos dessas estruturas neste livro.↩ Mesmo quando uma variável não existe para uma unidade amostral, representamos esse valor como um missing↩ "]
]
